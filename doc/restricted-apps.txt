Permissions:
	- ioports
	- access to drivers
		- read
		- write
		- ioctl
	- access to fs
		- read
		- write
	- access to services
		- commands??
	- signal-handler (interrupts)
	- is driver/service
	- physical memory
	- shared mem
		- create
		- join

Concept:
	- it is generally only possible to execute (exec) apps that are in the AppsDB
	- the AppsDB is stored on the ext2-partition, i.e. the kernel reads it from fs and builds
		a data-structure from it
	- an application gets, during install, an id which will be stored in the os-specific field
		of the ext2-inode. this will be used to identify the app.
	- the user should be able to change the permissions during install, before and during the runtime
		of an app (at least some of them).
	- the user is able to search the AppsDB to find apps by name and permissions
	- we need some pre-installed apps: all support-apps for this concept. perhaps we should forbid to
		uninstall them?
	- we have to pass the corresponding permission-rights for ata/cdrom/... and fs via
		multiboot-modules
	- we support multiple AppsDB-files. this way we can e.g. provide a first db on a cdrom with all
		available apps so that the system is usable but give the user a chance to mount a harddrive
		and add an AppsDB on this harddrive. I.e. he/she can download and install new programs on the
		harddrive
	- it should be possible to disable the whole system (via multiboot-argument to the kernel) for
		the case that something is seriously wrong. therefore the system is still usable if the db is
		destroyed or something like that.
	- we should store which app comes from which AppsDB-file and if it is writable (AppDBs on cdroms
		may be changed in RAM only).
	- the AppsDB-entries can be read in /system/apps, so that the search-user-app can simply use
		file-operations
	- the AppsDB-entries can be created, removed and changed in /system/apps, too. the apps-db-system
		will be notified about changes as soon as the operation is done (e.g. close() has been called),
		so that it can change/add/remove apps.
	- this way we need no dedicated system-calls for the AppsDB

Support from user-app(s):
	- install a given application with given permissions
	- uninstall a given application
	- change permissions of an application
	- search applications


Driver-Groups:
	BIN_PRIV:
		- ata, keyboard, mouse, video
	BIN_PUB:
		- null, random, zero
	TEXT_PUB:
		- vterm

Data-Structures:
	typedef struct {
		char *source;
		bool writable;
	} sAppDB;
	
	typedef struct {
		u8 type;
		u8 group;		/* if type = GROUP */
		char *name;	/* if type = NAME */
		bool read;
		bool write;
		bool ioctrl;
	} sDriverPerm;
	
	typedef struct {
		u32 start;
		u32 end;
	}	sRange;
	
	typedef struct {
		u32 id;
		sAppDB *db;
		u16 appType;					/* driver, fs, service or default */
		sSLList *ioports;			/* list of sRange */
		sSLList *driver;			/* list of sDriverPerm */
		struct {
			bool read;
			bool write;
		} fs;
		sSLList *services;		/* list of names */
		sSLList *signals;			/* list of signal-numbers */
		sSLList *physMem;			/* list of sRange */
		sSLList *createShMem; /* list of names */
		sSLList *joinShMem;		/* list of names */
	} sApp;

	sSLList *apps[HASH_SIZE];	/* key is (id % HASH_SIZE) */
	
VFS:
	/system/apps:
		<id1>
		<id2>
		...
		<idn>
	
	format:
		source:							<name>
		sourceWritable:			<1|0>
		type:								<driver|fs|service|default>
		ioports:						<X1..Y1,X2..Y2,...,Xn..Yn>
		driver:							{<group|name>,<group>,<name>,<1|0>,<1|0>,<1|0>},{...},...,{...}
		fs:									<1|0>,<1|0>
		services:						<name1>,<name2>,...<namen>
		signals:						<sig1>,<sig2>,...,<sign>
		physmem:						<X1..Y1,X2..Y2,...,Xn..Yn>
		crtshmem:						<name1>,<name2>,...<namen>
		joinshmem:					<name1>,<name2>,...<namen>
