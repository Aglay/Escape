# -*- Mode: Python -*-

Import('env')
import os

kenv = env.Clone()
ldconf = 'src/arch/$TGT/ld.conf'
gensyms = Builder(action = './tools/gensymbols.sh $SOURCE > $TARGET')
kenv.Append(
	CFLAGS = ' -ffreestanding',
	CXXFLAGS = ' -std=c++0x -fno-exceptions -fno-rtti -ffreestanding',
	CPPFLAGS = ' -DIN_KERNEL=1',
	LINKFLAGS = ' -ffreestanding -nostdlib -nostartfiles -nodefaultlibs -Wl,-T,kernel/' + ldconf,
	BUILDERS = {'GenSyms' : gensyms}
)

if kenv['TGTTYPE'] == 'x86':
	kenv.Append(
		CFLAGS = ' -msoft-float',
		CXXFLAGS = ' -msoft-float'
	)

#kenv.Append(
#	CPPFLAGS = ' -D PROFILE=1 -finstrument-functions -finstrument-functions-exclude-file-list='	+
#		'ksymbols.cc,src/arch/i586/gdt.cc,src/basic/arch/$TGT/profile.c'
#)

src = [kenv.Glob('src/arch/$TGT/kernel.S')]
src += [kenv.Glob('src/*.c'), kenv.Glob('src/*/*.c')]
src += [f for f in kenv.Glob('src/*.cc') if 'start.cc' not in str(f)]
src += [kenv.Glob('src/*/*.cc')]
src += [f for f in kenv.Glob('src/*/*/*.c') if 'arch/' not in str(f)]
src += [f for f in kenv.Glob('src/*/*/*.cc') if 'arch/' not in str(f)]
src += [kenv.Glob('src/arch/$TGT/*.cc')]
src += [kenv.Glob('src/arch/$TGT/*/*.cc'), kenv.Glob('src/arch/$TGT/*/*/*.cc')]
src += [kenv.Glob('src/arch/$TGTTYPE/*.cc'), kenv.Glob('src/arch/$TGTTYPE/*.S')]
src += [kenv.Glob('src/arch/$TGTTYPE/*/*.cc'), kenv.Glob('src/arch/$TGTTYPE/*/*/*.cc')]
src += [kenv.Glob('src/basic/arch/$TGT/*.c'), kenv.Glob('src/basic/arch/$TGTTYPE/*.c')]
src += [kenv.Glob('src/basic/arch/$TGT/*.S')]
src += [f for f in kenv.Glob('src/arch/$TGT/*.S') if 'kernel.S' not in str(f)]
src += [kenv.Glob('src/arch/$TGT/*/*.S'), kenv.Glob('src/arch/$TGTTYPE/*/*.S')]
tsrc = [
	kenv.Glob('test/*.cc'), kenv.Glob('test/arch/$TGT/*.cc'), kenv.Glob('test/arch/$TGTTYPE/*.cc')
]
mainsrc = 'src/start.cc'

# works around the problem that we use those sources for two programs. this way, we isolate each
# source file in its own environment
def objects(env, srcs):
    return [env.Object(src) for src in srcs]

def LinkWithSymbols(kenv, name, objects):
	# generate empty symbol file
	kenv.GenSyms(name + 'ksyms1.cc', kenv.Value('-'))
	kenv.Object(name + 'ksyms1.o', name + 'ksyms1.cc')
	# build the kernel with it
	prekernel = kenv.EscapeCProg(
		prefix = '', target = 'pre' + name, source = objects + [name + 'ksyms1.o'],
		force_static = True, var_addr = False, LIBS = ['gcc']
	)

	# generate symbol file for built kernel
	kenv.GenSyms(name + 'ksyms2.cc', prekernel)
	kenv.Object(name + 'ksyms2.o', name + 'ksyms2.cc')
	# now build the real kernel
	kernel = kenv.EscapeCProg(
		prefix = 'boot', target = name, source = objects + [name + 'ksyms2.o'],
		force_static = True, var_addr = False, LIBS = ['gcc']
	)
	return kernel

kernel = LinkWithSymbols(kenv, 'escape', objects(kenv, src + [mainsrc]))
test_kernel = LinkWithSymbols(kenv, 'escape_test', objects(kenv, src + tsrc))

kenv.Depends(kernel, ldconf)
kenv.Depends(test_kernel, ldconf)
