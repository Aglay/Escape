# -*- Mode: Python -*-

Import('env')
import os

kenv = env.Clone()
ldconf = 'kernel/src/arch/$ARCH/ld.conf'
gensyms = Builder(action = './tools/gensymbols.sh $SOURCE > $TARGET')
kenv.Append(
	CFLAGS = ' -DIN_KERNEL=1',
	LINKFLAGS = ' -ffreestanding -nostdlib -nostartfiles -nodefaultlibs -Wl,-T,' + ldconf,
	BUILDERS = {'GenSyms' : gensyms}
)

src = [kenv.Glob('src/arch/$ARCH/kernel.S')]
src += [kenv.Glob('src/*.c'), kenv.Glob('src/*/*.c')]
src += [f for f in kenv.Glob('src/*/*/*.c') if 'arch/' not in str(f)]
src += [f for f in kenv.Glob('src/arch/$ARCH/*.c') if 'start.c' not in str(f)]
src += [kenv.Glob('src/arch/$ARCH/*/*.c')]
src += [kenv.Glob('src/basic/arch/$ARCH/*.c')]
src += [kenv.Glob('src/basic/arch/$ARCH/*.S')]
src += [f for f in kenv.Glob('src/arch/$ARCH/*.S') if 'kernel.S' not in str(f)]
src += [f for f in kenv.Glob('src/arch/$ARCH/*/*.S')]
tsrc = [kenv.Glob('test/*.c'), kenv.Glob('test/arch/$ARCH/*.c')]
mainsrc = 'src/arch/$ARCH/start.c'

# works around the problem that we use those sources for two programs. this way, we isolate each
# source file in its own environment
def objects(env, srcs):
    return [env.Object(src) for src in srcs]

def LinkWithSymbols(kenv, name, objects):
	# generate empty symbol file
	kenv.GenSyms(name + 'ksyms1.c', kenv.Value('-'))
	kenv.Object(name + 'ksyms1.o', name + 'ksyms1.c')
	# build the kernel with it
	prekernel = kenv.EscapeCProg(
		prefix = '', target = 'pre' + name, source = objects + [name + 'ksyms1.o'],
		force_static = True, var_addr = False, LIBS = ['gcc']
	)
	
	# generate symbol file for built kernel
	kenv.GenSyms(name + 'ksyms2.c', prekernel)
	kenv.Object(name + 'ksyms2.o', name + 'ksyms2.c')
	# now build the real kernel
	kernel = kenv.EscapeCProg(
		prefix = 'boot', target = name, source = objects + [name + 'ksyms2.o'],
		force_static = True, var_addr = False, LIBS = ['gcc']
	)
	return kernel

kernel = LinkWithSymbols(kenv, 'escape', objects(kenv, src + [mainsrc]))
test_kernel = LinkWithSymbols(kenv, 'escape_test', objects(kenv, src + tsrc))

if kenv['ARCH'] == 'i586':
	tramp = '$BUILDDIR/kernel_tramp.dump'
	trampobj = '$BUILDDIR/kernel_tramp.o'
	kenv.Command(trampobj, 'src/arch/i586/trampoline.asm','nasm -f bin -o $TARGET $SOURCE')
	dump = env.Command(tramp, trampobj, '$BINDIR/hostdump $SOURCE > $TARGET')
	kenv.Depends(dump, '$BINDIR/hostdump')
	kenv.Depends(kernel, tramp)
	kenv.Depends(test_kernel, tramp)
