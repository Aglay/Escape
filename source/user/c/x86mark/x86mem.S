
#define cpuid
/* 
 * xmark.S -- Generated by xmark.py
 */ 

.data
count:		.int  8
Output:		.int 0; .int 1
.text
.globl maddmadd
.align 32
maddmadd:	pushl %esi; pushl %edi;
	pushl %ebx; pushl %ebp
	call  .setup
cpuid; rdtsc; movl %eax, count; xorl %eax, %eax; xorl %edx, %edx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	addl  (%esp), %ebx
	cpuid; rdtsc; subl count, %eax
	finit
	popl %ebp; popl %ebx; popl %edi; popl %esi; ret
.globl maddadd
.align 32
maddadd:	pushl %esi; pushl %edi;
	pushl %ebx; pushl %ebp
	call  .setup
cpuid; rdtsc; movl %eax, count; xorl %eax, %eax; xorl %edx, %edx
	addl  (%esp), %ebx
	addl  %eax, %edi
	addl  (%esp), %ebx
	addl  %esp, %edx
	addl  (%esp), %ebx
	addl  %eax, %esi
	addl  (%esp), %ebx
	addl  %esp, %ebp
	addl  (%esp), %ebx
	addl  %eax, %edi
	addl  (%esp), %ebx
	addl  %esp, %edx
	addl  (%esp), %ebx
	addl  %eax, %esi
	addl  (%esp), %ebx
	addl  %esp, %ebp
	addl  (%esp), %ebx
	addl  %eax, %edi
	addl  (%esp), %ebx
	addl  %esp, %edx
	addl  (%esp), %ebx
	addl  %eax, %esi
	addl  (%esp), %ebx
	addl  %esp, %ebp
	addl  (%esp), %ebx
	addl  %eax, %edi
	addl  (%esp), %ebx
	addl  %esp, %edx
	addl  (%esp), %ebx
	addl  %eax, %esi
	addl  (%esp), %ebx
	addl  %esp, %ebp
	cpuid; rdtsc; subl count, %eax
	finit
	popl %ebp; popl %ebx; popl %edi; popl %esi; ret
.globl amaddadd
.align 32
amaddadd:	pushl %esi; pushl %edi;
	pushl %ebx; pushl %ebp
	call  .setup
cpuid; rdtsc; movl %eax, count; xorl %eax, %eax; xorl %edx, %edx
	addl  count, %ebx
	addl  %eax, %edi
	addl  count, %ebx
	addl  %esp, %edx
	addl  count, %ebx
	addl  %eax, %esi
	addl  count, %ebx
	addl  %esp, %ebp
	addl  count, %ebx
	addl  %eax, %edi
	addl  count, %ebx
	addl  %esp, %edx
	addl  count, %ebx
	addl  %eax, %esi
	addl  count, %ebx
	addl  %esp, %ebp
	addl  count, %ebx
	addl  %eax, %edi
	addl  count, %ebx
	addl  %esp, %edx
	addl  count, %ebx
	addl  %eax, %esi
	addl  count, %ebx
	addl  %esp, %ebp
	addl  count, %ebx
	addl  %eax, %edi
	addl  count, %ebx
	addl  %esp, %edx
	addl  count, %ebx
	addl  %eax, %esi
	addl  count, %ebx
	addl  %esp, %ebp
	cpuid; rdtsc; subl count, %eax
	finit
	popl %ebp; popl %ebx; popl %edi; popl %esi; ret
.globl addstore
.align 32
addstore:	pushl %esi; pushl %edi;
	pushl %ebx; pushl %ebp
	call  .setup
cpuid; rdtsc; movl %eax, count; xorl %eax, %eax; xorl %edx, %edx
	addl  %eax, %edi
	movl  %eax, Output
	addl  %esp, %edx
	movl  %esp, 4+Output
	addl  %eax, %esi
	movl  %eax, Output
	addl  %esp, %ebp
	movl  %esp, 4+Output
	addl  %eax, %edi
	movl  %eax, Output
	addl  %esp, %edx
	movl  %esp, 4+Output
	addl  %eax, %esi
	movl  %eax, Output
	addl  %esp, %ebp
	movl  %esp, 4+Output
	addl  %eax, %edi
	movl  %eax, Output
	addl  %esp, %edx
	movl  %esp, 4+Output
	addl  %eax, %esi
	movl  %eax, Output
	addl  %esp, %ebp
	movl  %esp, 4+Output
	addl  %eax, %edi
	movl  %eax, Output
	addl  %esp, %edx
	movl  %esp, 4+Output
	addl  %eax, %esi
	movl  %eax, Output
	addl  %esp, %ebp
	movl  %esp, 4+Output
	cpuid; rdtsc; subl count, %eax
	finit
	popl %ebp; popl %ebx; popl %edi; popl %esi; ret
.globl addload
.align 32
addload:	pushl %esi; pushl %edi;
	pushl %ebx; pushl %ebp
	call  .setup
cpuid; rdtsc; movl %eax, count; xorl %eax, %eax; xorl %edx, %edx
	addl  %eax, %edi
	movl  (%esp), %ebx
	addl  %esp, %edx
	movl  (%esp), %ebx
	addl  %eax, %esi
	movl  (%esp), %ebx
	addl  %esp, %ebp
	movl  (%esp), %ebx
	addl  %eax, %edi
	movl  (%esp), %ebx
	addl  %esp, %edx
	movl  (%esp), %ebx
	addl  %eax, %esi
	movl  (%esp), %ebx
	addl  %esp, %ebp
	movl  (%esp), %ebx
	addl  %eax, %edi
	movl  (%esp), %ebx
	addl  %esp, %edx
	movl  (%esp), %ebx
	addl  %eax, %esi
	movl  (%esp), %ebx
	addl  %esp, %ebp
	movl  (%esp), %ebx
	addl  %eax, %edi
	movl  (%esp), %ebx
	addl  %esp, %edx
	movl  (%esp), %ebx
	addl  %eax, %esi
	movl  (%esp), %ebx
	addl  %esp, %ebp
	movl  (%esp), %ebx
	cpuid; rdtsc; subl count, %eax
	finit
	popl %ebp; popl %ebx; popl %edi; popl %esi; ret
.globl loadstore
.align 32
loadstore:	pushl %esi; pushl %edi;
	pushl %ebx; pushl %ebp
	call  .setup
cpuid; rdtsc; movl %eax, count; xorl %eax, %eax; xorl %edx, %edx
	movl  (%esp), %ebx
	movl  %eax, Output
	movl  (%esp), %ebx
	movl  %esp, 4+Output
	movl  (%esp), %ebx
	movl  %eax, Output
	movl  (%esp), %ebx
	movl  %esp, 4+Output
	movl  (%esp), %ebx
	movl  %eax, Output
	movl  (%esp), %ebx
	movl  %esp, 4+Output
	movl  (%esp), %ebx
	movl  %eax, Output
	movl  (%esp), %ebx
	movl  %esp, 4+Output
	movl  (%esp), %ebx
	movl  %eax, Output
	movl  (%esp), %ebx
	movl  %esp, 4+Output
	movl  (%esp), %ebx
	movl  %eax, Output
	movl  (%esp), %ebx
	movl  %esp, 4+Output
	movl  (%esp), %ebx
	movl  %eax, Output
	movl  (%esp), %ebx
	movl  %esp, 4+Output
	movl  (%esp), %ebx
	movl  %eax, Output
	movl  (%esp), %ebx
	movl  %esp, 4+Output
	cpuid; rdtsc; subl count, %eax
	finit
	popl %ebp; popl %ebx; popl %edi; popl %esi; ret
.globl loadload
.align 32
loadload:	pushl %esi; pushl %edi;
	pushl %ebx; pushl %ebp
	call  .setup
cpuid; rdtsc; movl %eax, count; xorl %eax, %eax; xorl %edx, %edx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	movl  (%esp), %ebx
	cpuid; rdtsc; subl count, %eax
	finit
	popl %ebp; popl %ebx; popl %edi; popl %esi; ret
.globl storestore
.align 32
storestore:	pushl %esi; pushl %edi;
	pushl %ebx; pushl %ebp
	call  .setup
cpuid; rdtsc; movl %eax, count; xorl %eax, %eax; xorl %edx, %edx
	movl  %eax, Output
	movl  %esp, 4+Output
	movl  %eax, Output
	movl  %esp, 4+Output
	movl  %eax, Output
	movl  %esp, 4+Output
	movl  %eax, Output
	movl  %esp, 4+Output
	movl  %eax, Output
	movl  %esp, 4+Output
	movl  %eax, Output
	movl  %esp, 4+Output
	movl  %eax, Output
	movl  %esp, 4+Output
	movl  %eax, Output
	movl  %esp, 4+Output
	movl  %eax, Output
	movl  %esp, 4+Output
	movl  %eax, Output
	movl  %esp, 4+Output
	movl  %eax, Output
	movl  %esp, 4+Output
	movl  %eax, Output
	movl  %esp, 4+Output
	movl  %eax, Output
	movl  %esp, 4+Output
	movl  %eax, Output
	movl  %esp, 4+Output
	movl  %eax, Output
	movl  %esp, 4+Output
	movl  %eax, Output
	movl  %esp, 4+Output
	cpuid; rdtsc; subl count, %eax
	finit
	popl %ebp; popl %ebx; popl %edi; popl %esi; ret

.setup:
	xorl  %ecx,%ecx
	xorl  %edi,%edi
	xorl  %esi,%esi
	xorl  %ebx,%ebx
	xorl  %ebp,%ebp
	finit
	fld1; fld1; fld1; fld1
	fld1; fld1; fld1; fld1
	ret

.mmxsetup:
	xorl  %ecx,%ecx
	xorl  %edi,%edi
	xorl  %esi,%esi
	xorl  %ebx,%ebx
	xorl  %ebp,%ebp
	emms
	ret
