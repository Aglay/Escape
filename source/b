#!/bin/sh

# config
if [ -f /proc/cpuinfo ]; then
    cpus=`cat /proc/cpuinfo | grep '^processor[[:space:]]*:' | wc -l`
else
    cpus=1
fi
opts="-j$cpus"

# fall back to some reasonable defaults for the NRE environment variables
if [ -z "$ESC_TARGET" ]; then
    export ESC_TARGET=i586
fi
if [ "$ESC_BUILD" != "debug" ]; then
    export ESC_BUILD="release"
fi
if [ -z "$ESC_TFTPDIR" ]; then
    export ESC_TFTPDIR=/var/lib/tftpboot
fi
if [ -z "$ESC_GDB_I586" ]; then
    export ESC_GDB_I586="gdb --tui"
fi
if [ -z "$QEMU" ]; then
   export QEMU=qemu-system-i386
fi

# target dependend values
QEMU_FLAGS="-serial stdio"
if [ "$ESC_TARGET" = "i586" ]; then
    cross="i586-elf-escape"
    gdb=$ESC_GDB_I586
elif [ "$ESC_TARGET" = "eco32" ]; then
    cross="eco32-pc-nulnova"
elif [ "$ESC_TARGET" = "mmix" ]; then
    cross="mmix-pc-nulnova"
else
    echo 'Please define $ESC_TARGET to i586, eco32 or mmix!' >&2
    exit 1
fi

# don't change anything below!
crossdir="../toolchain/$ESC_TARGET"
build="build/$ESC_TARGET-$ESC_BUILD"
root=$(dirname $(readlink -f $0))
bochscfg="bochs.cfg"

help() {
    echo "Usage: $1 [<cmd> <arg>] [--no-build|-n]"
    echo ""
    echo -n "This is a convenience script that is responsible for building everything"
    echo -n " and running the specified command afterwards. The most important environment"
    echo -n " variables that influence its behaviour are ESC_BUILD=(debug|release) and"
    echo " ESC_TARGET=(i586|eco32|mmix)."
    echo -n "You can also prevent the script from building everything by specifying -n or --no-build."
    echo -n " In this case, only the specified command is executed."
    echo ""
    echo ""
    echo "The following commands are available:"
    echo "    clean:                   do a clean in NOVA and NRE"
    echo "    distclean:               remove NRE build-dirs and remove NOVA so that"
    echo "                             NOVA is checked out again and everything is"
    echo "                             rebuild"
    echo "    bochs <bootscript>:      generate an ISO image for <bootscript> and run it"
    echo "                             in bochs"
    echo "    qemu <bootscript>:       run <bootscript> in qemu"
    echo "    qemunet:                 run qemu and boot from network"
    echo "    srv <bootscript>:        copy <bootscript> to the server specified in"
    echo "                             ~/.novaboot with a grub config"
    echo "    srvp <bootscript>:       copy <bootscript> to the server specified in"
    echo "                             ~/.novaboot with a pulsar config"
    echo "    dis=<prog>:              run objdump -SC <prog> (the cross-compiler version)"
    echo "    elf=<prog>:              run readelf -a <prog> (the cross-compiler version)"
    echo "    straddr=<prog> <str>:    search for the string <str> in <prog> and display"
    echo "                             the addresses"
    echo "    trace=<prog>:            start the backtrace script for <prog>"
    echo "    dbg=<prog> <bootscript>: run <bootscript> in qemu and remote-debug <prog>"
    echo "                             in gdb"
    echo "    dbgr <bootscript>:       run <bootscript> in qemu and wait"
    echo "    list:                    list the link-address of all programs"
    echo ""
    echo "Environment variables:"
    echo "    ESC_TARGET:              the target architecture. Either x86_32 or x86_64."
    echo "                             The default is x86_64."
    echo "    ESC_BUILD:               the build-type. Either debug or release. In debug"
    echo "                             mode optimizations are disabled, debug infos are"
    echo "                             available and assertions are active. In release"
    echo "                             mode all that is disabled. The default is release."
    echo "    ESC_TFTPDIR:             the directory of your tftp-server which is used for"
    echo "                             qemu network booting. The default is"
    echo "                             /var/lib/tftpboot."
    echo "    ESC_GDB_X86_32:          the executable of gdb to use for ESC_TARGET=x86_32."
    echo "                             The default is gdbtui."
    echo "    ESC_GDB_X86_64:          the executable of gdb to use for ESC_TARGET=x86_64."
    echo "                             The default is x86_64-linux-gnu-gdbtui."
    echo "    QEMU:                    The qemu executable to use (default is"
    echo "                             qemu-system-x86_64)."
    echo "    QEMU_FLAGS:              Pass additional arguments to qemu."
    exit 0
}

# parse arguments
dobuild=true
cmd=""
script=""
while [ $# -gt 0 ]; do
    case "$1" in
        -h|-\?|--help)
            help $0
            ;;

        -n|--no-build)
            dobuild=false
            ;;

        *)
            if [ "$cmd" = "" ]; then
                cmd="$1"
            elif [ "$script" = "" ]; then
                script="$1"
            else
                echo "Too many arguments" >&2
                exit 1
            fi
            ;;
    esac
    shift
done

binary=""
case "$cmd" in
    # check parameters
    bochs|qemu|srv|srvp|dbg|dbgr)
        if [ "$script" = "" ]; then
            echo "Usage: $0 $cmd <script>" >&2
            exit 1
        fi
        ;;
    prof=*|straddr=*|dis=*|elf=*|trace=*|dbg=*)
        if [ "`echo $cmd | grep '^straddr='`" != "" ] && [ "$script" = "" ]; then
            echo "Usage: $0 $cmd <string>" >&2
            exit 1
        fi
        binary=${cmd#*=}
        ;;
    # for clean and distclean, it makes no sense to build it (this might even fail because e.g. scons has
    # a non existing dependency which might be the reason the user wants to do a clean)
    clean|distclean)
        dobuild=false
        ;;
    # check for unknown commands
    qemunet|list)
        ;;
    ?*)
        echo "Unknown command '$cmd'" >&2
        exit 1
        ;;
esac

echo "Working with $ESC_TARGET in $ESC_BUILD mode"

if $dobuild; then
    echo "Building Escape with $cpus jobs..."
    scons $opts || exit 1
fi

build_iso() {
   mkdir -p $build/dist/boot/grub
    cp dist/arch/$ESC_TARGET/boot/* $build/dist/boot/grub
	cp boot/$ESC_TARGET/$1 $build/dist/boot/grub/menu.lst
	genisoimage -U -iso-level 3 -input-charset ascii -R -b boot/grub/stage2_eltorito \
		-no-emul-boot -boot-load-size 4 -boot-info-table -o $build/cd.iso $build/dist
}

# run the specified command, if any
case "$cmd" in
    clean)
        scons -c
        ;;
    distclean)
        rm -Rf build/*
        ;;
    prof=*)
        $build/tools/conv/conv i586 log.txt $build/bin/$binary > result.xml
        ;;
        
    qemu)
    	build_iso $script
		$QEMU $QEMU_FLAGS -cdrom $build/cd.iso
        ;;
    bochs)
        mkdir -p $build/bin/boot/grub
        cp $root/dist/iso/boot/grub/stage2_eltorito $build/bin/boot/grub
        ./tools/novaboot --build-dir="$PWD/$build" --iso -- $script
        # replace the build path for all ata drives
        path=`echo $build/ | sed -e 's/\//\\\\\//g'`
        sed --in-place -e 's/\(ata.*\?:.*\?path\)=build\/[^\/]*\?\/\(.*\?\),/\1='$path'\2,/g' $bochscfg
        # put the generated iso into ata0-master
        filename=`basename $script`
        path=`echo $build/$filename.iso | sed -e 's/\//\\\\\//g'`
        sed --in-place -e 's/^\(ata0-master:.*\?path\)=\(.*\?\),/\1='$path',/' $bochscfg
        bochs -f $bochscfg -q
        ;;
    # qemu)
    #    ./$script --qemu="$QEMU" --qemu-append="$QEMU_FLAGS" --build-dir="$PWD/$build" | tee log.txt
    #    ;;
    qemunet)
        $QEMU $QEMU_FLAGS -boot n -bootp pulsar -tftp $ESC_TFTPDIR
        ;;
    srv)
        ./$script --server --build-dir="$PWD/$build"
        ;;
    srvp)
        ./$script --server -p --build-dir="$PWD/$build"
        ;;
    dis=*)
        $crossdir/bin/$cross-objdump -SC $build/bin/$binary | less
        ;;
    elf=*)
        $crossdir/bin/$cross-readelf -a $build/bin/$binary | less
        ;;
    straddr=*)
        echo "Strings containing '$script' in $binary:"
        # find base address of .rodata
        base=`$crossdir/bin/$cross-readelf -S $build/bin/$binary | grep .rodata | \
            xargs | cut -d ' ' -f 5`
        # find section number of .rodata
        section=`$crossdir/bin/$cross-readelf -S $build/bin/$binary | grep .rodata | \
        	xargs | cut -d ' ' -f 1 | sed -e 's/\[\([[:digit:]]*\)\]/\1/'`
        # grep for matching lines, prepare for better use of awk and finally add offset to base
        $crossdir/bin/$cross-readelf -p $section $build/bin/$binary | grep $script | \
            sed 's/^ *\[ *\([[:xdigit:]]*\)\] *\(.*\)$/0x\1 \2/' | \
            awk '{ printf("0x%x: %s %s %s %s %s %s\n",0x'$base' + strtonum($1),$2,$3,$4,$5,$6,$7) }'
        ;;
    trace=*)
        tools/backtrace $build/bin/$binary
        ;;
    dbg=*)
    	build_iso $script
        tmp=$(mktemp)
        echo "target remote localhost:1234" >> $tmp
        echo "display/i \$pc" >> $tmp
        # the problem is that qemu terminates if it receives SIGINT. so, if we want to
        # interrupt the execution and examine the state in gdb by pressing ^C, qemu
        # terminates. to prevent that we use a small program (ignoreint) no block SIGINT,
        # which replaces itself with the given program afterwards
        #$build/tools/ignoreint/ignoreint 
        $QEMU $QEMU_FLAGS -cdrom $build/cd.iso -S -s > log.txt &
        $gdb $build/bin/$binary --command=$tmp
        rm -f $tmp
        kill `pgrep qemu` 2>/dev/null
        ;;
    dbgr)
        ./$script --qemu="$QEMU" --build-dir="$PWD/$build" --qemu-append="$QEMU_FLAGS-S -s"
        ;;
    list)
        echo "Start of section .text:"
        ls -1 $build/bin | grep -v '\.a$' | while read l; do	
            $crossdir/bin/$cross-readelf -S $build/bin/$l | \
                grep "\.text " | awk "{ printf(\"%20s: %s\n\",\"$l\",\$5) }"
        done
        ;;
esac
