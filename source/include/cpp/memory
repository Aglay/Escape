/**
 * $Id$
 * Copyright (C) 2008 - 2009 Nils Asmussen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

#pragma once

#include <stddef.h>

namespace std {
	template<class Y>
	struct auto_ptr_ref {
		Y* _p;
		explicit auto_ptr_ref(Y *p);
	};

	template<class X>
	class auto_ptr {
	public:
		typedef X element_type;

		explicit auto_ptr(X* p = 0) throw();
		auto_ptr(auto_ptr& ptr) throw();
		template<class Y>
		auto_ptr(auto_ptr<Y>& ptr) throw();
		~auto_ptr() throw();

		auto_ptr& operator =(auto_ptr& ptr) throw();
		template<class Y>
		auto_ptr& operator =(auto_ptr<Y>& ptr) throw();
		auto_ptr& operator =(auto_ptr_ref<X> r) throw();

		X& operator *() const throw();
		X* operator ->() const throw();
		X* get() const throw();
		X* release() throw();
		virtual void reset(X* p = 0) throw();

		auto_ptr(auto_ptr_ref<X> r) throw();
		template<class Y>
		operator auto_ptr_ref <Y>() throw();
		template<class Y>
		operator auto_ptr <Y>() throw();

	protected:
		X* _p;
	};

	template<class X>
	class auto_array : public auto_ptr<X> {
	public:
		typedef typename auto_ptr<X>::element_type element_type;

		explicit auto_array(X* p = 0) throw();
		~auto_array() throw();

		X& operator [](int index) const throw();

		virtual void reset(X* p = 0) throw();
	};
}

#include "../../lib/cpp/memory.cc"
