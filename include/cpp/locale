/**
 * $Id$
 * Copyright (C) 2008 - 2009 Nils Asmussen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

#ifndef LOCALE_
#define LOCALE_

#include <stddef.h>

namespace std {
	// 22.1.1, locale:
	class locale;

	/**
	 * Facet is a facet class whose definition contains the public static member id as defined
	 * in 22.1.1.1.2. The reference returned remains valid at least as long as any copy of loc exists.
	 *
	 * @return a reference to the corresponding facet of loc , if present.
	 * @throws bad_cast if has_facet<Facet>(loc) is false.
	 */
	template<class Facet>
	const Facet& use_facet(const locale&);
	/**
	 * @return true if the facet requested is present in loc ; otherwise false.
	 */
	template<class Facet>
	bool has_facet(const locale&) throw ();

	// 22.1.3, convenience interfaces:
	template<class charT> bool isspace(charT c,const locale& loc);
	template<class charT> bool isprint(charT c,const locale& loc);
	template<class charT> bool iscntrl(charT c,const locale& loc);
	template<class charT> bool isupper(charT c,const locale& loc);
	template<class charT> bool islower(charT c,const locale& loc);
	template<class charT> bool isalpha(charT c,const locale& loc);
	template<class charT> bool isdigit(charT c,const locale& loc);
	template<class charT> bool ispunct(charT c,const locale& loc);
	template<class charT> bool isxdigit(charT c,const locale& loc);
	template<class charT> bool isalnum(charT c,const locale& loc);
	template<class charT> bool isgraph(charT c,const locale& loc);
	template<class charT> charT toupper(charT c,const locale& loc);
	template<class charT> charT tolower(charT c,const locale& loc);

	// 22.2.1 and 22.2.1.3, ctype:
	class ctype_base;
	template<class charT> class ctype;
	template<> class ctype<char> ; // specialization
	template<class charT> class ctype_byname;
	template<> class ctype_byname<char> ; // specialization

	class codecvt_base;
	template<class internT,class externT,class stateT> class codecvt;
	template<class internT,class externT,class stateT> class codecvt_byname;

	// 22.2.2 and 22.2.3, numeric:
	template<class charT,class InputIterator> class num_get;
	template<class charT,class OutputIterator> class num_put;
	template<class charT> class numpunct;
	template<class charT> class numpunct_byname;

	// 22.2.4, collation:
	template<class charT> class collate;
	template<class charT> class collate_byname;

	// 22.2.5, date and time: class
	class time_base;
	template<class charT,class InputIterator> class time_get;
	template<class charT,class InputIterator> class time_get_byname;
	template<class charT,class OutputIterator> class time_put;
	template<class charT,class OutputIterator> class time_put_byname;

	// 22.2.6, money:
	class money_base;
	template<class charT,class InputIterator> class money_get;
	template<class charT,class OutputIterator> class money_put;
	template<class charT,bool Intl> class moneypunct;
	template<class charT,bool Intl> class moneypunct_byname;

	// 22.2.7, message retrieval:
	class messages_base;
	template<class charT> class messages;
	template<class charT> class messages_byname;
}

#endif /* LOCALE_ */
