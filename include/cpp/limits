/**
 * $Id$
 * Copyright (C) 2008 - 2009 Nils Asmussen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

#ifndef LIMITS_
#define LIMITS_

#include <stddef.h>
#include <limits.h>

namespace std {
	template<typename T>
	struct numeric_limits {
		/** This will be true for all fundamental types (which have
		 specializations), and false for everything else.  */
		static const bool is_specialized = false;

		/** The number of @c radix digits that be represented without change:  for
		 integer types, the number of non-sign bits in the mantissa; for
		 floating types, the number of @c radix digits in the mantissa.  */
		static const int digits = 0;
		/** The number of base 10 digits that can be represented without change. */
		static const int digits10 = 0;
		/** True if the type is signed.  */
		static const bool is_signed = false;
		/** True if the type is integer.
		 *  Is this supposed to be "if the type is integral"?
		 */
		static const bool is_integer = false;
		/** True if the type uses an exact representation.  "All integer types are
		 exact, but not all exact types are integer.  For example, rational and
		 fixed-exponent representations are exact but not integer."
		 [18.2.1.2]/15  */
		static const bool is_exact = false;
		/** For integer types, specifies the base of the representation.  For
		 floating types, specifies the base of the exponent representation.  */
		static const int radix = 0;

		/** The minimum finite value, or for floating types with
		 denormalization, the minimum positive normalized value.  */
		static T min() throw () {
			return static_cast<T> (0);
		}
		/** The maximum finite value.  */
		static T max() throw () {
			return static_cast<T> (0);
		}
	};

	template<>
	struct numeric_limits<bool> {
		static const bool is_specialized = true;

		static bool min() throw () {
			return false;
		}
		static bool max() throw () {
			return true;
		}

		static const int digits = 1;
		static const int digits10 = 0;
		static const bool is_signed = false;
		static const bool is_integer = true;
		static const bool is_exact = true;
		static const int radix = 2;
	};

	template<>
	struct numeric_limits<char> {
		static const bool is_specialized = true;

		static bool min() throw () {
			return SCHAR_MIN;
		}
		static bool max() throw () {
			return SCHAR_MAX;
		}

		static const int digits = 7;
		static const int digits10 = 3;
		static const bool is_signed = true;
		static const bool is_integer = true;
		static const bool is_exact = true;
		static const int radix = 2;
	};

	template<>
	struct numeric_limits<unsigned char> {
		static const bool is_specialized = true;

		static bool min() throw () {
			return 0;
		}
		static bool max() throw () {
			return UCHAR_MAX;
		}

		static const int digits = 8;
		static const int digits10 = 3;
		static const bool is_signed = false;
		static const bool is_integer = true;
		static const bool is_exact = true;
		static const int radix = 2;
	};

	template<>
	struct numeric_limits<short> {
		static const bool is_specialized = true;

		static bool min() throw () {
			return SHRT_MIN;
		}
		static bool max() throw () {
			return SHRT_MAX;
		}

		static const int digits = 15;
		static const int digits10 = 5;
		static const bool is_signed = true;
		static const bool is_integer = true;
		static const bool is_exact = true;
		static const int radix = 2;
	};

	template<>
	struct numeric_limits<unsigned short> {
		static const bool is_specialized = true;

		static bool min() throw () {
			return 0;
		}
		static bool max() throw () {
			return USHRT_MAX;
		}

		static const int digits = 16;
		static const int digits10 = 5;
		static const bool is_signed = false;
		static const bool is_integer = true;
		static const bool is_exact = true;
		static const int radix = 2;
	};

	template<>
	struct numeric_limits<int> {
		static const bool is_specialized = true;

		static bool min() throw () {
			return INT_MIN;
		}
		static bool max() throw () {
			return INT_MAX;
		}

		static const int digits = 15;
		static const int digits10 = 5;
		static const bool is_signed = true;
		static const bool is_integer = true;
		static const bool is_exact = true;
		static const int radix = 2;
	};

	template<>
	struct numeric_limits<unsigned int> {
		static const bool is_specialized = true;

		static bool min() throw () {
			return 0;
		}
		static bool max() throw () {
			return UINT_MAX;
		}

		static const int digits = 16;
		static const int digits10 = 5;
		static const bool is_signed = false;
		static const bool is_integer = true;
		static const bool is_exact = true;
		static const int radix = 2;
	};

	template<>
	struct numeric_limits<long> {
		static const bool is_specialized = true;

		static bool min() throw () {
			return LONG_MIN;
		}
		static bool max() throw () {
			return LONG_MAX;
		}

		static const int digits = 31;
		static const int digits10 = 10;
		static const bool is_signed = true;
		static const bool is_integer = true;
		static const bool is_exact = true;
		static const int radix = 2;
	};

	template<>
	struct numeric_limits<unsigned long> {
		static const bool is_specialized = true;

		static bool min() throw () {
			return 0;
		}
		static bool max() throw () {
			return ULONG_MAX;
		}

		static const int digits = 32;
		static const int digits10 = 10;
		static const bool is_signed = false;
		static const bool is_integer = true;
		static const bool is_exact = true;
		static const int radix = 2;
	};

	template<>
	struct numeric_limits<long long> {
		static const bool is_specialized = true;

		static bool min() throw () {
			return LLONG_MIN;
		}
		static bool max() throw () {
			return LLONG_MAX;
		}

		static const int digits = 63;
		static const int digits10 = 19;
		static const bool is_signed = true;
		static const bool is_integer = true;
		static const bool is_exact = true;
		static const int radix = 2;
	};

	template<>
	struct numeric_limits<unsigned long long> {
		static const bool is_specialized = true;

		static bool min() throw () {
			return 0;
		}
		static bool max() throw () {
			return ULLONG_MAX;
		}

		static const int digits = 64;
		static const int digits10 = 20;
		static const bool is_signed = false;
		static const bool is_integer = true;
		static const bool is_exact = true;
		static const int radix = 2;
	};
}

#endif /* LIMITS_ */
