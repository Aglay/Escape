/**
 * $Id$
 * Copyright (C) 2008 - 2009 Nils Asmussen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

#ifndef OSTREAM_
#define OSTREAM_

#include <stddef.h>
#include <impl/streams/ios.h>
#include <impl/streams/ios_base.h>

namespace std {
	/**
	 * The basic output-stream that provides formated- and unformated-output-methods.
	 */
	class ostream: virtual public ios {
	public:
		typedef ios::char_type char_type;
		typedef ios::int_type int_type;
		typedef ios::size_type size_type;
		typedef ios::pos_type pos_type;
		typedef ios::off_type off_type;

		/**
		 * Constructs a new output-stream with given streambuffer
		 */
		explicit ostream(streambuf* sb);
		/**
		 * Destructor
		 */
		virtual ~ostream();

		/**
		 * For pre- and post-operations
		 */
		class sentry {
		public:
			/**
			 * If os.good() is nonzero, prepares for formatted or unformatted output.
			 */
			explicit sentry(ostream& os);
			/**
			 * Destructor
			 */
			~sentry();
			/**
			 * @return wether everything is ok
			 */
			operator bool() const;
		private:
			sentry(const sentry &); // not defined
			sentry & operator =(const sentry &); // not defined

		private:
			bool _ok;
			ostream& _os;
		};

		/**
		 * Provides printf()-like formatting.
		 *
		 * @param fmt the format
		 * @param ap the argument-pointer
		 * @return *this
		 */
		ostream& format(const char *fmt,...);
		ostream& format(const char *fmt,va_list ap);

		/**
		 * Calls pf(*this) and returns *this
		 */
		ostream& operator <<(ostream& (*pf)(ostream&));
		ostream& operator <<(ios& (*pf)(ios&));
		ostream& operator <<(ios_base & (*pf)(ios_base &));

		/**
		 * Writes the given integer or floating-point-number into the output-stream
		 *
		 * @param n the integer
		 * @param f the floating-point-number
		 * @param p the pointer
		 */
		ostream& operator <<(bool n);
		ostream& operator <<(short n);
		ostream& operator <<(unsigned short n);
		ostream& operator <<(int n);
		ostream& operator <<(unsigned int n);
		ostream& operator <<(long n);
		ostream& operator <<(unsigned long n);
		ostream& operator <<(long long n);
		ostream& operator <<(unsigned long long n);
		ostream& operator <<(float f);
		ostream& operator <<(double f);
		ostream& operator <<(long double f);
		ostream& operator <<(const void * p);

		ostream& operator <<(streambuf* sb);

		/**
		 * Writes the given character into the output-stream
		 *
		 * @param c the character
		 * @return *this
		 */
		ostream& put(char_type c);
		/**
		 * Writes <n> characters from the given string into the stream
		 *
		 * @param s the string
		 * @param n the number of chars to write
		 * @return *this
		 */
		ostream& write(const char_type * s,streamsize n);
		/**
		 * Flushes the buffer
		 */
		ostream& flush();

		/* TODO
		 * pos_type tellp();
		ostream& seekp(pos_type);
		ostream& seekp(off_type,ios_base::seekdir);*/

	private:
		template<class T>
		void writeSigned(T n);
		template<class T>
		void writeUnsigned(T u);
		template<class T>
		void writeSChars(T n);
		template<class T>
		void writeUChars(T u,unsigned int base,const char *hexchars);
		void writeDouble(long double d);
		void writeDoubleChars(long double d);
		void writePad(streamsize count);

	private:
		streambuf* _sb;
	};

	/**
	 * Writes the given character into the given stream
	 */
	ostream& operator <<(ostream&,char);

	/**
	 * Writes the given string into the given stream
	 */
	ostream& operator <<(ostream&,const char *);

	/**
	 * Writes a newline into the given stream
	 */
	ostream& endl(ostream& os);
	/**
	 * Writes a null-character into the given stream
	 */
	ostream& ends(ostream& os);
	/**
	 * Flushes the given stream
	 */
	ostream& flush(ostream& os);
}

#endif /* OSTREAM_ */
