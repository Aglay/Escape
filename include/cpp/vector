/**
 * $Id$
 * Copyright (C) 2008 - 2009 Nils Asmussen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

#ifndef STD_VECTOR_
#define STD_VECTOR_

#include <stddef.h>
#include <iterator>

namespace std {
	template<class T>
	class vector {
	public:
		typedef T value_type;
		typedef value_type& reference;
		typedef const value_type& const_reference;
		typedef value_type* pointer;
		typedef const value_type* const_pointer;
		typedef pointer iterator;
		typedef const_pointer const_iterator;
		typedef size_t size_type;
		typedef ptrdiff_t difference_type;
		typedef std::reverse_iterator<iterator> reverse_iterator;
		typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

	public:
		static const size_type INITIAL_SIZE = 8;

	public:
		explicit vector();
		explicit vector(size_type n,const T& value = T());
		template<class InputIterator>
		vector(InputIterator first,InputIterator last);
		vector(const vector<T>& x);
		~vector();

		vector<T>& operator =(const vector<T>& x);
		template<class InputIterator>
		void assign(InputIterator first,InputIterator last);
		void assign(size_type n,const T& u);

		iterator begin();
		const_iterator begin() const;
		iterator end();
		const_iterator end() const;
		reverse_iterator rbegin();
		const_reverse_iterator rbegin() const;
		reverse_iterator rend();
		const_reverse_iterator rend() const;

		size_type size() const;
		size_type max_size() const;
		void resize(size_type sz,T c = T());
		size_type capacity() const;
		bool empty() const;
		void reserve(size_type n);

		reference operator[](size_type n);
		const_reference operator[](size_type n) const;
		reference at(size_type n);
		const_reference at(size_type n) const;
		reference front();
		const_reference front() const;
		reference back();
		const_reference back() const;
		pointer data();
		const_pointer data() const;

		void push_back(const T& x);
		void pop_back();
		iterator insert(iterator position,const T& x);
		void insert(iterator position,size_type n,const T& x);
		template<class InputIterator>
		void insert(iterator position,InputIterator first,InputIterator last);
		iterator erase(iterator position);
		iterator erase(iterator first,iterator last);
		void swap(vector<T>&);
		void clear();

	private:
		size_type _count;
		size_type _size;
		T* _elements;
	};

	template<class T>
	bool operator ==(const vector<T>& x,const vector<T>& y);
	template<class T>
	bool operator <(const vector<T>& x,const vector<T>& y);
	template<class T>
	bool operator !=(const vector<T>& x,const vector<T>& y);
	template<class T>
	bool operator >(const vector<T>& x,const vector<T>& y);
	template<class T>
	bool operator >=(const vector<T>& x,const vector<T>& y);
	template<class T>
	bool operator <=(const vector<T>& x,const vector<T>& y);

	template<class T>
	int compare(const vector<T>& x,const vector<T>& y);
	template<class T>
	void swap(vector<T>& x,vector<T>& y);
}

#include "../../lib/cpp/src/vector.cc"

#endif /* STD_VECTOR_ */
