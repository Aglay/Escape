                   # 1 "manual/hexmon.mms"
                   # 1 "<built-in>"
                   # 1 "<command-line>"
                   # 1 "manual/hexmon.mms"
                   
                    %******************************************************%
                    %* *%
                    %* B o o t M o n - G I M M I X *%
                    %* *%
                    %* Bootstrap Monitor for GIMMIX Processor *%
                    %* *%
                    %* Version 1 *%
                    %* *%
                    %* 10/2004 by H.Geisse *%
                    %* *%
                    %******************************************************%
                   
                   
                   %***********************************************************************
                   % vectors
                   %***********************************************************************
                   
                    LOC #FFFF00000000
                   
0000ffff00000000:  Main JMP start % bootmon cold start
 ...000: f0xxxxxx
 ...004: f0xxxxxx  cin JMP kbi % console input
 ...008: f0xxxxxx  cout JMP dpo % console output
                   
                   
                   %***********************************************************************
                   % main program
                   %***********************************************************************
                   
 ...00c: f401xxxx  start GETA $1,signon % show sign-on message
 ...010: f200xxxx    PUSHJ $0,msgout
                   
 ...014: f401xxxx    GETA $1,gimmix % show serial number of CPU
 ...018: f200xxxx    PUSHJ $0,msgout
 ...01c: fe010009    GET $1,rN
 ...020: f200xxxx    PUSHJ $0,hexout
 ...024: f401xxxx    GETA $1,crlf
 ...028: f200xxxx    PUSHJ $0,msgout
                   
                     % TODO temporary: simply boot without asking
 ...02c: f200xxxx    PUSHJ $0,bcmd
                   
 ...030: f401xxxx  cmdloop GETA $1,prompt % show prompt
 ...034: f200xxxx    PUSHJ $0,msgout
                   
 ...038: f200xxxx    PUSHJ $0,echo % get and echo a character
                   
 ...03c: f401xxxx    GETA $1,cmdtbl % search for a command in table
 ...040: 83020100  cmdlp1 LDBU $2,$1,0
 ...044: 4202xxxx    BZ $2,error % not found
 ...048: 32020200    CMPU $2,$2,$0
 ...04c: 4a02xxxx    BNZ $2,cmdlp2 % not this one, try next one
 ...050: 8f010108    LDOU $1,$1,8 % jump to command interpreting routine
 ...054: e8018000    ORH $1,#8000
 ...058: 9f010100    GO $1,$1,0
 ...05c: 23010110  cmdlp2 ADDU $1,$1,16
 ...060: f1fffff8    JMP cmdlp1
                   
 ...064: f401xxxx  error GETA $1,errmsg % say that we did not understand
 ...068: f200xxxx    PUSHJ $0,msgout
 ...06c: f1fffff1    JMP cmdloop
                   
                   %***********************************************************************
                   % empty command
                   %***********************************************************************
                   
 ...070: f401xxxx  crcmd GETA $1,crlf % terminate line
 ...074: f200xxxx    PUSHJ $0,msgout
 ...078: f1ffffee    JMP cmdloop
                   
                   
                   %***********************************************************************
                   % bootstrap command
                   %***********************************************************************
                   
 ...07c: f401xxxx  bcmd GETA $1,crlf % terminate line
 ...080: f200xxxx    PUSHJ $0,msgout
                   
 ...084: e0008003    SETH $0,#8003
 ...088: 8f010000  1H LDOU $1,$0,0 % wait until disk is ready
 ...08c: 4301ffff    BZ $1,1B
 ...090: 8f010018    LDOU $1,$0,24 % check if disk present
 ...094: 31020100    CMP $2,$1,0
 ...098: 4202xxxx    BZ $2,nodsk
                   
 ...09c: f403xxxx    GETA $3,dfmsg % say that we found a disk
 ...0a0: f202xxxx    PUSHJ $2,msgout
 ...0a4: c1030100    SET $3,$1 % and how many sectors it has
 ...0a8: f202xxxx    PUSHJ $2,hexout
 ...0ac: f403xxxx    GETA $3,sctmsg
 ...0b0: f202xxxx    PUSHJ $2,msgout
                   
 ...0b4: e3010001    SETL $1,#0001 % sector count
 ...0b8: af010008    STOU $1,$0,8
 ...0bc: e3010000    SETL $1,#0000 % first sector
 ...0c0: af010010    STOU $1,$0,16
 ...0c4: e3010001    SETL $1,#0001 % start command
 ...0c8: af010000    STOU $1,$0,0
 ...0cc: 8f010000  dskwait LDOU $1,$0,0
 ...0d0: c9010110    AND $1,$1,#10 % ready?
 ...0d4: 5301fffe    PBZ $1,dskwait
 ...0d8: 8f010000    LDOU $1,$0,0
 ...0dc: c9010108    AND $1,$1,#08 % error?
 ...0e0: 4a01xxxx    BNZ $1,dskerr
                   
 ...0e4: e0008003    SETH $0,#8003 % load from disk-buffer into memory
 ...0e8: ea000008    ORML $0,#0008
 ...0ec: e0018000    SETH $1,#8000
 ...0f0: eb010000    ORL $1,#0000
 ...0f4: e3020000    SET $2,0
 ...0f8: e3040200    SET $4,512
 ...0fc: 8e030002  cpyloop LDOU $3,$0,$2
 ...100: ae030102    STOU $3,$1,$2
 ...104: 23020208    ADDU $2,$2,8
 ...108: 32030204    CMPU $3,$2,$4
 ...10c: 5103fffc    PBN $3,cpyloop
                   
                     % we have to sync the data- with the instruction-cache
 ...110: c0020101    OR $2,$1,$1
 ...114: b9ff0200    SYNCD #FF,$2,0 % first flush to memory; SYNCID will simply remove it
 ...118: bdff0200    SYNCID #FF,$2,0
 ...11c: 230202ff    ADDU $2,$2,#FF
 ...120: 23020201    ADDU $2,$2,1
 ...124: b9ff0200    SYNCD #FF,$2,0
 ...128: bdff0200    SYNCID #FF,$2,0
                   
 ...12c: 9f000100    GO $0,$1,0 % finally...lift off
                   
 ...130: f401xxxx  nodsk GETA $1,dnfmsg % there is no disk
 ...134: f200xxxx    PUSHJ $0,msgout
 ...138: f1ffffbe    JMP cmdloop
                   
 ...13c: f401xxxx  dskerr GETA $1,demsg % disk error
 ...140: f200xxxx    PUSHJ $0,msgout
 ...144: f1ffffbb    JMP cmdloop
                   
 ...148: f401xxxx  nosig GETA $1,nsgmsg % no signature
 ...14c: f200xxxx    PUSHJ $0,msgout
 ...150: f1ffffb8    JMP cmdloop
                   
                   
                   %***********************************************************************
                   % utilities
                   %***********************************************************************
                   
                    % output null-terminated message
                    % in: $0 pointer to message
                    % out: --
 ...154: fe010004  msgout GET $1,rJ
 ...158: 83030000  msgout1 LDBU $3,$0
 ...15c: 31020300    CMP $2,$3,0
 ...160: 5202xxxx    PBZ $2,msgout2
 ...164: f302ffa9    PUSHJ $2,cout
 ...168: 23000001    ADDU $0,$0,1
 ...16c: f1fffffb    JMP msgout1
 ...170: f6040001  msgout2 PUT rJ,$1
 ...174: f8000000    POP 0,0
                   
                    % output octabyte in hex
                    % in: $0 octabyte
                    % out: --
 ...178: fe010004  hexout GET $1,rJ
 ...17c: e302000f    SETL $2,#000F
 ...180: 3b030202  hex1 SLU $3,$2,2
 ...184: 3e040003    SRU $4,$0,$3
 ...188: f203xxxx    PUSHJ $3,nybout
 ...18c: 27020201    SUBU $2,$2,1
 ...190: 5902fffc    PBNN $2,hex1
 ...194: f6040001    PUT rJ,$1
 ...198: f8000000    POP 0,0
                   
                    % output nybble in hex
                    % in: $0 nybble
                    % out: --
 ...19c: c900000f  nybout AND $0,$0,#0F
 ...1a0: 23000030    ADDU $0,$0,#30
 ...1a4: 3101003a    CMP $1,$0,#3A
 ...1a8: 5001xxxx    PBN $1,nyb1
 ...1ac: 23000007    ADDU $0,$0,7
 ...1b0: fe010004  nyb1 GET $1,rJ
 ...1b4: c1030000    SET $3,$0
 ...1b8: f302ff94    PUSHJ $2,cout
 ...1bc: f6040001    PUT rJ,$1
 ...1c0: f8000000    POP 0,0
                   
                    % console echo
                    % in: --
                    % out: $X character
 ...1c4: fe000004  echo GET $0,rJ
 ...1c8: f301ff8f    PUSHJ $1,cin
 ...1cc: c1030100    SET $3,$1
 ...1d0: f302ff8e    PUSHJ $2,cout
 ...1d4: f6040000    PUT rJ,$0
 ...1d8: f8020000    POP 2,0
                   
                   
                   %***********************************************************************
                   % I/O
                   %***********************************************************************
                   
                    % keyboard input
                    % in: --
                    % out: $X character
 ...1dc: e0018002  kbi SETH $1,#8002
 ...1e0: 8f020100  kbi1 LDOU $2,$1,0
 ...1e4: c9020201    AND $2,$2,1
 ...1e8: 5302fffe    PBZ $2,kbi1
 ...1ec: 8f000108    LDOU $0,$1,8
 ...1f0: f8010000    POP 1,0
                   
                    % display output
                    % in: $0 character
                    % out: --
 ...1f4: e0018002  dpo SETH $1,#8002
 ...1f8: 8f020110  dpo1 LDOU $2,$1,16
 ...1fc: c9020201    AND $2,$2,1
 ...200: 5302fffe    PBZ $2,dpo1
 ...204: af000118    STOU $0,$1,24
 ...208: f8000000    POP 0,0
                   
                   
                   %***********************************************************************
                   % data
                   %***********************************************************************
                   
                     LOC @+(8-@)&7
 ...210: 0d000000  cmdtbl BYTE #0D,0,0,0,0,0,0,0
 ...214: 00000000
 ...218: 0000ffff    OCTA crcmd
 ...21c: 00000070
 ...220: 62000000    BYTE "b",0,0,0,0,0,0,0
 ...224: 00000000
 ...228: 0000ffff    OCTA bcmd
 ...22c: 0000007c
 ...230: 00000000    BYTE 0,0,0,0,0,0,0,0
 ...234: 00000000
 ...238: 00000000    OCTA 0
 ...23c: 00000000
                   
                     LOC @+(4-@)&3
 ...240: 426f6f74  signon BYTE "BootMon Version 1",#0D,#0A,0
 ...244: 4d6f6e20
 ...248: 56657273
 ...24c: 696f6e20
 ...250: 310d0a00
                   
                     LOC @+(4-@)&3
 ...254: 47494d4d  gimmix BYTE "GIMMIX S/N #",0
 ...258: 49582053
 ...25c: 2f4e2023
 ...260: 00      
                   
                     LOC @+(4-@)&3
 ...264: 0d0a00    crlf BYTE #0D,#0A,0
                   
                     LOC @+(4-@)&3
 ...268: 2300      prompt BYTE "#",0
                   
                     LOC @+(4-@)&3
 ...26c: 3f0d0a00  errmsg BYTE "?",#0D,#0A,0
                   
                     LOC @+(4-@)&3
 ...270: 4469736b  dnfmsg BYTE "Disk not found!",#0D,#0A,0
 ...274: 206e6f74
 ...278: 20666f75
 ...27c: 6e64210d
 ...280: 0a00    
                   
                     LOC @+(4-@)&3
 ...284: 4469736b  dfmsg BYTE "Disk with #",0
 ...288: 20776974
 ...28c: 68202300
                   
                     LOC @+(4-@)&3
 ...290: 20736563  sctmsg BYTE " sectors found, booting...",#0D,#0A,0
 ...294: 746f7273
 ...298: 20666f75
 ...29c: 6e642c20
 ...2a0: 626f6f74
 ...2a4: 696e672e
 ...2a8: 2e2e0d0a
 ...2ac: 00      
                   
                     LOC @+(4-@)&3
 ...2b0: 4469736b  demsg BYTE "Disk error!",#0D,#0A,0
 ...2b4: 20657272
 ...2b8: 6f72210d
 ...2bc: 0a00    
                   
                     LOC @+(4-@)&3
 ...2c0: 4d425220  nsgmsg BYTE "MBR signature missing!",#0D,#A,0
 ...2c4: 7369676e
 ...2c8: 61747572
 ...2cc: 65206d69
 ...2d0: 7373696e
 ...2d4: 67210d0a
 ...2d8: 00      

Symbol table:
 Main = #0000ffff00000000 (1)
 bcmd = #0000ffff0000007c (12)
 cin = #0000ffff00000004 (4)
 cmdloop = #0000ffff00000030 (14)
 cmdlp1 = #0000ffff00000040 (17)
 cmdlp2 = #0000ffff0000005c (19)
 cmdtbl = #0000ffff00000210 (16)
 cout = #0000ffff00000008 (6)
 cpyloop = #0000ffff000000fc (27)
 crcmd = #0000ffff00000070 (21)
 crlf = #0000ffff00000264 (11)
 demsg = #0000ffff000002b0 (29)
 dfmsg = #0000ffff00000284 (23)
 dnfmsg = #0000ffff00000270 (28)
 dpo = #0000ffff000001f4 (5)
 dpo1 = #0000ffff000001f8 (38)
 dskerr = #0000ffff0000013c (26)
 dskwait = #0000ffff000000cc (25)
 echo = #0000ffff000001c4 (15)
 errmsg = #0000ffff0000026c (20)
 error = #0000ffff00000064 (18)
 gimmix = #0000ffff00000254 (9)
 hex1 = #0000ffff00000180 (34)
 hexout = #0000ffff00000178 (10)
 kbi = #0000ffff000001dc (3)
 kbi1 = #0000ffff000001e0 (37)
 msgout = #0000ffff00000154 (8)
 msgout1 = #0000ffff00000158 (32)
 msgout2 = #0000ffff00000170 (33)
 nodsk = #0000ffff00000130 (22)
 nosig = #0000ffff00000148 (31)
 nsgmsg = #0000ffff000002c0 (30)
 nyb1 = #0000ffff000001b0 (36)
 nybout = #0000ffff0000019c (35)
 prompt = #0000ffff00000268 (13)
 sctmsg = #0000ffff00000290 (24)
 signon = #0000ffff00000240 (7)
 start = #0000ffff0000000c (2)
