                   # 1 "manual/output.mms"
                   # 1 "<built-in>"
                   # 1 "<command-line>"
                   # 1 "manual/output.mms"
                   %
                   % output.mms -- write to output-file
                   %
                   
                     LOC #0
 ...000: 48656c6c  STR BYTE "Hello World output-file!",#d,#a,0
 ...004: 6f20576f
 ...008: 726c6420
 ...00c: 6f757470
 ...010: 75742d66
 ...014: 696c6521
 ...018: 0d0a00  
                   
                     LOC #1000
                   
                     % write welcome-message
0000000000001000:  Main SET $1,STR
 ...000: e3010000
 ...004: e8018000    ORH $1,#8000
 ...008: f200xxxx    PUSHJ $0,io:oputs
                   
 ...00c: f1fffffd    JMP Main
                   
                   # 1 "manual/io.mmi" 1
                   %
                   % some io-functions
                   %
                   
                   % terminal 0 rcvr ctrl: #8002000000000000
                   % terminal 0 rcvr data: #8002000000000008
                   % terminal 0 xmtr ctrl: #8002000000000010
                   % terminal 0 xmtr data: #8002000000000018
                   % terminal 1 rcvr ctrl: #8002000100000000
                   % terminal 1 rcvr data: #8002000100000008
                   % terminal 1 xmtr ctrl: #8002000100000010
                   % terminal 1 xmtr data: #8002000100000018
                   
                     PREFIX io:
                   
 ...010: 30313233  hexch BYTE "0123456789ABCDEF",0
 ...014: 34353637
 ...018: 38394142
 ...01c: 43444546
 ...020: 00      
                     LOC @+(4-@)&3
 ...024: 6e616e00  nan BYTE "nan",0
 ...028: 696e6600  inf BYTE "inf",0
                   
                   % void putf(octa term,octa f)
 ...02c: fe020004  putf GET $2,:rJ % save rJ
 ...030: 4801xxxx    BNN $1,1F % f >= 0?
 ...034: c1040000    SET $4,$0
 ...038: e305002d    SET $5,'-'
 ...03c: f203xxxx    PUSHJ $3,putc % putc(term,'-')
 ...040: ec018000    ANDNH $1,#8000 % f = -f
 ...044: e0037ff0  1H SETH $3,#7FF0
 ...048: c8040103    AND $4,$1,$3 % check exponent
 ...04c: 32050403    CMPU $5,$4,$3
 ...050: 4a05xxxx    BNZ $5,3F % if not #7FF, its no nan and no inf
 ...054: 35030001    NEG $3,0,1
 ...058: ec03fff0    ANDNH $3,#FFF0 % fraction-mask
 ...05c: c8040103    AND $4,$1,$3
 ...060: 4a04xxxx    BNZ $4,2F % if fraction not zero, its nan
 ...064: c1040000    SET $4,$0
 ...068: f505fff0    GETA $5,inf
 ...06c: f203xxxx    PUSHJ $3,puts % puts(term,"inf")
 ...070: f0xxxxxx    JMP 6F
 ...074: c1040000  2H SET $4,$0
 ...078: f505ffeb    GETA $5,nan
 ...07c: f203xxxx    PUSHJ $3,puts % puts(term,"nan")
 ...080: f0xxxxxx    JMP 6F
 ...084: c1040000  3H SET $4,$0
 ...088: c1050100    SET $5,$1
 ...08c: f203xxxx    PUSHJ $3,_putfn % _putfn(term,f)
 ...090: c1040000    SET $4,$0
 ...094: e305002e    SET $5,'.'
 ...098: f203xxxx    PUSHJ $3,putc % putc(term,'.')
 ...09c: e0044024    SETH $4,#4024 % 10.0
 ...0a0: 17030101    FINT $3,:ROUND_OFF,$1
 ...0a4: 06010103    FSUB $1,$1,$3 % f -= (int)f
                     % multiply it with 10 until the fraction is gone
 ...0a8: 17030101    FINT $3,:ROUND_OFF,$1
 ...0ac: 32030103  4H CMPU $3,$1,$3
 ...0b0: 4203xxxx    BZ $3,5F % if fraction == 0, we are done
 ...0b4: 10010104    FMUL $1,$1,$4 % f *= 10
 ...0b8: 17030101    FINT $3,:ROUND_OFF,$1
 ...0bc: 4b03fffc    BNZ $3,4B % if its still zero, print the 0
 ...0c0: c1060000    SET $6,$0
 ...0c4: e3070030    SET $7,'0'
 ...0c8: f205xxxx    PUSHJ $5,putc % putc(term,'0')
 ...0cc: f1fffff8    JMP 4B
 ...0d0: c1040000  5H SET $4,$0
 ...0d4: c1050100    SET $5,$1
 ...0d8: f203xxxx    PUSHJ $3,_putfn % finally, print it
 ...0dc: f6040002  6H PUT :rJ,$2 % restore rJ
 ...0e0: f8000000    POP 0,0
                   
                   % void _putfn(octa term,octa f)
 ...0e4: fe020004  _putfn GET $2,:rJ
 ...0e8: 17010101    FINT $1,:ROUND_OFF,$1 % f = (int)f
 ...0ec: e0034024    SETH $3,#4024 % 10.0
 ...0f0: 01040103    FCMP $4,$1,$3
 ...0f4: 4004xxxx    BN $4,1F % if g < 10, stop recursion
 ...0f8: 14060103    FDIV $6,$1,$3 % g = f / 10
 ...0fc: c1050000    SET $5,$0
 ...100: f304fff9    PUSHJ $4,_putfn % _putfn(g)
 ...104: 16050103  1H FREM $5,$1,$3 % x = f % 10
 ...108: 4805xxxx    BNN $5,2F % its negative if its >= 5, (-5, -4, ...)
 ...10c: 04050305    FADD $5,$3,$5 % so, x = 10 + x
 ...110: c1040000  2H SET $4,$0
 ...114: 05050005    FIX $5,$5
 ...118: 23050530    ADDU $5,$5,'0' % x += '0'
 ...11c: f203xxxx    PUSHJ $3,putc % putc(term,x)
 ...120: f6040002    PUT :rJ,$2 % restore rJ
 ...124: f8000000    POP 0,0
                   
                   % void putn(octa term,octa n)
 ...128: fe020004  putn GET $2,:rJ % save rJ
 ...12c: 5801xxxx    PBNN $1,1F % n < 0?
 ...130: c0040000    OR $4,$0,$0
 ...134: e305002d    SET $5,'-'
 ...138: f203xxxx    PUSHJ $3,putc % putc(term,'-')
 ...13c: 34010001    NEG $1,0,$1 % n = -n
 ...140: 3303010a  1H CMPU $3,$1,10
 ...144: 5003xxxx    PBN $3,1F % n >= 10?
 ...148: c0040000    OR $4,$0,$0
 ...14c: 1d05010a    DIV $5,$1,10 % t = n / 10
 ...150: fe010006    GET $1,:rR % n = n % 10
 ...154: f303fff5    PUSHJ $3,putn % putn(term,t)
 ...158: c0040000  1H OR $4,$0,$0
 ...15c: c0050101    OR $5,$1,$1
 ...160: 23050530    ADDU $5,$5,48 % char + '0'
 ...164: f203xxxx    PUSHJ $3,putc % putc(term,n)
 ...168: f6040002    PUT :rJ,$2 % restore rJ
 ...16c: f8000000    POP 0,0
                   
                   % void putu(octa term,octa u,octa base)
 ...170: fe030004  putu GET $3,:rJ % save rJ
 ...174: 32040102    CMPU $4,$1,$2
 ...178: 5004xxxx    PBN $4,1F % n >= base?
 ...17c: c0050000    OR $5,$0,$0
 ...180: 1e060102    DIVU $6,$1,$2 % t = n / base
 ...184: c0070202    OR $7,$2,$2
 ...188: fe010006    GET $1,:rR % n = n % base
 ...18c: f304fff9    PUSHJ $4,putu % putu(term,t,base)
 ...190: c0050000  1H OR $5,$0,$0
 ...194: f506ff9f    GETA $6,hexch
 ...198: 82060601    LDBU $6,$6,$1
 ...19c: f204xxxx    PUSHJ $4,putc % putc(term,hexch[n])
 ...1a0: f6040003    PUT :rJ,$3 % restore rJ
 ...1a4: f8000000    POP 0,0
                   
                   % octa gets(octa term,char *dst,octa max)
 ...1a8: fe030004  gets GET $3,:rJ % save rJ
 ...1ac: 23040100    ADDU $4,$1,0
 ...1b0: 31050201  1H CMP $5,$2,1
 ...1b4: 4c05xxxx    BNP $5,2F % if(max <= 1) goto 1F
 ...1b8: 23060000    ADDU $6,$0,0
 ...1bc: f205xxxx    PUSHJ $5,getc % call getc(term)
 ...1c0: 23070000    ADDU $7,$0,0
 ...1c4: 23080500    ADDU $8,$5,0
 ...1c8: f206xxxx    PUSHJ $6,putc % call putc(term,c)
 ...1cc: 3106050d    CMP $6,$5,#0D % c == \n?
 ...1d0: 4206xxxx    BZ $6,1F % if so, stop
 ...1d4: a3050100    STBU $5,$1,0 % otherwise, store char
 ...1d8: 23010101    ADDU $1,$1,1 % to next
 ...1dc: 25020201    SUB $2,$2,1 % max--
 ...1e0: f1fffff4    JMP 1B
 ...1e4: 23060000  2H ADDU $6,$0,0
 ...1e8: e307000d    SET $7,#0D
 ...1ec: f205xxxx    PUSHJ $5,putc % call putc(term,'\n')
 ...1f0: 23060000  1H ADDU $6,$0,0
 ...1f4: e307000a    SET $7,#0A
 ...1f8: f205xxxx    PUSHJ $5,putc % call putc(term,'\r')
 ...1fc: a30a0100    STBU $10,$1,0 % null-termination
 ...200: 26000104    SUBU $0,$1,$4 % determine length
 ...204: f6040003    PUT :rJ,$3 % restore rJ
 ...208: f8010000    POP 1,0 % return length
                   
                   % octa getc(octa term)
 ...20c: e0018002  getc SETH $1,#8002 % base address: #8002000000000000
 ...210: 39000020    SL $0,$0,32 % or in terminal-number
 ...214: c0010100    OR $1,$1,$0 % -> #8002000100000000 for term 1, e.g.
 ...218: 8f020100  1H LDOU $2,$1,#0 % read ctrl-reg
 ...21c: c9020201    AND $2,$2,#1 % extract RDY-bit
 ...220: 5302fffe    PBZ $2,1B % wait until its set
 ...224: 8f000108    LDOU $0,$1,#8 % load char
 ...228: f8010000    POP 1,0 % return it
                   
                   % void puts(octa term,char *string)
 ...22c: fe020004  puts GET $2,:rJ % save rJ
 ...230: 83050100  1H LDBU $5,$1,0 % load char from string
 ...234: 4205xxxx    BZ $5,2F % if its 0, we are done
 ...238: 23040000    ADDU $4,$0,0
 ...23c: f203xxxx    PUSHJ $3,putc % call putc(c)
 ...240: 23010101    ADDU $1,$1,1 % to next char
 ...244: f1fffffb    JMP 1B
 ...248: f6040002  2H PUT :rJ,$2 % restore rJ
 ...24c: f8000000    POP 0,0
                   
                   % void putc(octa term,octa character)
 ...250: e0028002  putc SETH $2,#8002 % base address: #8002000000000000
 ...254: 39000020    SL $0,$0,32 % or in terminal-number
 ...258: c0020200    OR $2,$2,$0 % -> #8002000100000000 for term 1, e.g.
 ...25c: 8f030210  1H LDOU $3,$2,#10 % read ctrl-reg
 ...260: c9030301    AND $3,$3,#1 % exract RDY-bit
 ...264: 5303fffe    PBZ $3,1B % wait until its set
 ...268: af010218    STOU $1,$2,#18 % write char
 ...26c: f8000000    POP 0,0
                   
                   % void oputs(char *string)
 ...270: fe010004  oputs GET $1,:rJ % save rJ
 ...274: 83030000  1H LDBU $3,$0,0 % load char from string
 ...278: 4203xxxx    BZ $3,2F % if its 0, we are done
 ...27c: f202xxxx    PUSHJ $2,oputc % call oputc(c)
 ...280: 23000001    ADDU $0,$0,1 % to next char
 ...284: f1fffffc    JMP 1B
 ...288: f6040001  2H PUT :rJ,$1 % restore rJ
 ...28c: f8000000    POP 0,0
                   
                   % void oputc(octa character)
 ...290: e0018004  oputc SETH $1,#8004 % base address: #8004000000000000
 ...294: af000100    STOU $0,$1,0 % write char
 ...298: f8000000    POP 0,0
                   
                     PREFIX :
                   # 17 "manual/output.mms" 2

Symbol table:
 Main = #0000000000001000 (1)
 STR = #0000000000000000 (2)
 io:_putfn = #00000000000010e4 (11)
 io:getc = #000000000000120c (15)
 io:gets = #00000000000011a8 (14)
 io:hexch = #0000000000001010 (5)
 io:inf = #0000000000001028 (7)
 io:nan = #0000000000001024 (6)
 io:oputc = #0000000000001290 (16)
 io:oputs = #0000000000001270 (3)
 io:putc = #0000000000001250 (9)
 io:putf = #000000000000102c (8)
 io:putn = #0000000000001128 (12)
 io:puts = #000000000000122c (10)
 io:putu = #0000000000001170 (13)
