                   # 1 "manual/cswap.mms"
                   # 1 "<built-in>"
                   # 1 "<command-line>"
                   # 1 "manual/cswap.mms"
                   %
                   % cswap.mms -- tests a usage of CSWAP
                   %
                   
(0000000000008000) CMPLOC IS #8000
                   
                     LOC #0
 ...000: 57616974  WAIT BYTE "Waiting...",0
 ...004: 696e672e
 ...008: 2e2e00  
 ...00b:       55  UNLCK BYTE "Unlocked!",#d,#a,0
 ...00c: 6e6c6f63
 ...010: 6b656421
 ...014: 0d0a00  
                   
                     LOC #F000
                   
000000000000f000:  DTRAP GET $10,rQ
 ...000: fe0a0010
 ...004: f7100000    PUT rQ,0
 ...008: e30a8000    SET $10,CMPLOC
 ...00c: e80a8000    ORH $10,#8000
 ...010: b5000a00    STCO 0,$10,0 % unlock
 ...014: 35ff0001    NEG $255,0,1
 ...018: edff0001    ANDNMH $255,#0001 % set interrupt-mask
 ...01c: f9000001    RESUME 1
                   
                   
                     LOC #1000
                   
0000000000001000:  Main SETH $0,#8000
 ...000: e0008000
 ...004: e9000000    ORMH $0,DTRAP>>32
 ...008: ea000000    ORML $0,DTRAP>>16
 ...00c: eb00f000    ORL $0,DTRAP>>0
 ...010: f60e0000    PUT rTT,$0
                   
                     % enable interrupts
 ...014: 35000001    NEG $0,0,1
 ...018: ed000001    ANDNMH $0,#0001
 ...01c: f60f0000    PUT rK,$0
                   
                     % configure timer
 ...020: e0008001    SETH $0,#8001
 ...024: e3010c00    SET $1,#C00
 ...028: af010008    STOU $1,$0,8 % timer-divisor = #C00
 ...02c: e3010002    SET $1,#2
 ...030: af010000    STOU $1,$0,0 % enable timer-interrupts
                   
 ...034: e30a8000    SET $10,CMPLOC
 ...038: e80a8000    ORH $10,#8000
 ...03c: b5010a00    STCO 1,$10,0 % lock
                   
 ...040: e3018000  reset SET $1,CMPLOC % set location
 ...044: e8018000    ORH $1,#8000
                   
 ...048: e3030000    SETL $3,0
 ...04c: e3040000    SETL $4,WAIT
 ...050: e8048000    ORH $4,#8000
 ...054: f202xxxx    PUSHJ $2,io:puts % io:puts(0,"Waiting...")
                   
 ...058: e3000001  loop SET $0,#1 % set $0 and rP
 ...05c: f7170000    PUT rP,0
 ...060: 95000100    CSWAP $0,$1,0 % compare and swap
 ...064: 4300fffd    BZ $0,loop % if its 0, its still locked
                   
 ...068: e3030000    SETL $3,0
 ...06c: e304000b    SETL $4,UNLCK
 ...070: e8048000    ORH $4,#8000
 ...074: f202xxxx    PUSHJ $2,io:puts % io:puts(0,"Unlocked\r\n")
 ...078: f1fffff2    JMP reset
                   
                   # 1 "manual/io.mmi" 1
                   %
                   % some io-functions
                   %
                   
                   % terminal 0 rcvr ctrl: #8002000000000000
                   % terminal 0 rcvr data: #8002000000000008
                   % terminal 0 xmtr ctrl: #8002000000000010
                   % terminal 0 xmtr data: #8002000000000018
                   % terminal 1 rcvr ctrl: #8002000100000000
                   % terminal 1 rcvr data: #8002000100000008
                   % terminal 1 xmtr ctrl: #8002000100000010
                   % terminal 1 xmtr data: #8002000100000018
                   
                     PREFIX io:
                   
 ...07c: 30313233  hexch BYTE "0123456789ABCDEF",0
 ...080: 34353637
 ...084: 38394142
 ...088: 43444546
 ...08c: 00      
                     LOC @+(4-@)&3
 ...090: 6e616e00  nan BYTE "nan",0
 ...094: 696e6600  inf BYTE "inf",0
                   
                   % void putf(octa term,octa f)
 ...098: fe020004  putf GET $2,:rJ % save rJ
 ...09c: 4801xxxx    BNN $1,1F % f >= 0?
 ...0a0: c1040000    SET $4,$0
 ...0a4: e305002d    SET $5,'-'
 ...0a8: f203xxxx    PUSHJ $3,putc % putc(term,'-')
 ...0ac: ec018000    ANDNH $1,#8000 % f = -f
 ...0b0: e0037ff0  1H SETH $3,#7FF0
 ...0b4: c8040103    AND $4,$1,$3 % check exponent
 ...0b8: 32050403    CMPU $5,$4,$3
 ...0bc: 4a05xxxx    BNZ $5,3F % if not #7FF, its no nan and no inf
 ...0c0: 35030001    NEG $3,0,1
 ...0c4: ec03fff0    ANDNH $3,#FFF0 % fraction-mask
 ...0c8: c8040103    AND $4,$1,$3
 ...0cc: 4a04xxxx    BNZ $4,2F % if fraction not zero, its nan
 ...0d0: c1040000    SET $4,$0
 ...0d4: f505fff0    GETA $5,inf
 ...0d8: f203xxxx    PUSHJ $3,puts % puts(term,"inf")
 ...0dc: f0xxxxxx    JMP 6F
 ...0e0: c1040000  2H SET $4,$0
 ...0e4: f505ffeb    GETA $5,nan
 ...0e8: f203xxxx    PUSHJ $3,puts % puts(term,"nan")
 ...0ec: f0xxxxxx    JMP 6F
 ...0f0: c1040000  3H SET $4,$0
 ...0f4: c1050100    SET $5,$1
 ...0f8: f203xxxx    PUSHJ $3,_putfn % _putfn(term,f)
 ...0fc: c1040000    SET $4,$0
 ...100: e305002e    SET $5,'.'
 ...104: f203xxxx    PUSHJ $3,putc % putc(term,'.')
 ...108: e0044024    SETH $4,#4024 % 10.0
 ...10c: 17030101    FINT $3,:ROUND_OFF,$1
 ...110: 06010103    FSUB $1,$1,$3 % f -= (int)f
                     % multiply it with 10 until the fraction is gone
 ...114: 17030101    FINT $3,:ROUND_OFF,$1
 ...118: 32030103  4H CMPU $3,$1,$3
 ...11c: 4203xxxx    BZ $3,5F % if fraction == 0, we are done
 ...120: 10010104    FMUL $1,$1,$4 % f *= 10
 ...124: 17030101    FINT $3,:ROUND_OFF,$1
 ...128: 4b03fffc    BNZ $3,4B % if its still zero, print the 0
 ...12c: c1060000    SET $6,$0
 ...130: e3070030    SET $7,'0'
 ...134: f205xxxx    PUSHJ $5,putc % putc(term,'0')
 ...138: f1fffff8    JMP 4B
 ...13c: c1040000  5H SET $4,$0
 ...140: c1050100    SET $5,$1
 ...144: f203xxxx    PUSHJ $3,_putfn % finally, print it
 ...148: f6040002  6H PUT :rJ,$2 % restore rJ
 ...14c: f8000000    POP 0,0
                   
                   % void _putfn(octa term,octa f)
 ...150: fe020004  _putfn GET $2,:rJ
 ...154: 17010101    FINT $1,:ROUND_OFF,$1 % f = (int)f
 ...158: e0034024    SETH $3,#4024 % 10.0
 ...15c: 01040103    FCMP $4,$1,$3
 ...160: 4004xxxx    BN $4,1F % if g < 10, stop recursion
 ...164: 14060103    FDIV $6,$1,$3 % g = f / 10
 ...168: c1050000    SET $5,$0
 ...16c: f304fff9    PUSHJ $4,_putfn % _putfn(g)
 ...170: 16050103  1H FREM $5,$1,$3 % x = f % 10
 ...174: 4805xxxx    BNN $5,2F % its negative if its >= 5, (-5, -4, ...)
 ...178: 04050305    FADD $5,$3,$5 % so, x = 10 + x
 ...17c: c1040000  2H SET $4,$0
 ...180: 05050005    FIX $5,$5
 ...184: 23050530    ADDU $5,$5,'0' % x += '0'
 ...188: f203xxxx    PUSHJ $3,putc % putc(term,x)
 ...18c: f6040002    PUT :rJ,$2 % restore rJ
 ...190: f8000000    POP 0,0
                   
                   % void putn(octa term,octa n)
 ...194: fe020004  putn GET $2,:rJ % save rJ
 ...198: 5801xxxx    PBNN $1,1F % n < 0?
 ...19c: c0040000    OR $4,$0,$0
 ...1a0: e305002d    SET $5,'-'
 ...1a4: f203xxxx    PUSHJ $3,putc % putc(term,'-')
 ...1a8: 34010001    NEG $1,0,$1 % n = -n
 ...1ac: 3303010a  1H CMPU $3,$1,10
 ...1b0: 5003xxxx    PBN $3,1F % n >= 10?
 ...1b4: c0040000    OR $4,$0,$0
 ...1b8: 1d05010a    DIV $5,$1,10 % t = n / 10
 ...1bc: fe010006    GET $1,:rR % n = n % 10
 ...1c0: f303fff5    PUSHJ $3,putn % putn(term,t)
 ...1c4: c0040000  1H OR $4,$0,$0
 ...1c8: c0050101    OR $5,$1,$1
 ...1cc: 23050530    ADDU $5,$5,48 % char + '0'
 ...1d0: f203xxxx    PUSHJ $3,putc % putc(term,n)
 ...1d4: f6040002    PUT :rJ,$2 % restore rJ
 ...1d8: f8000000    POP 0,0
                   
                   % void putu(octa term,octa u,octa base)
 ...1dc: fe030004  putu GET $3,:rJ % save rJ
 ...1e0: 32040102    CMPU $4,$1,$2
 ...1e4: 5004xxxx    PBN $4,1F % n >= base?
 ...1e8: c0050000    OR $5,$0,$0
 ...1ec: 1e060102    DIVU $6,$1,$2 % t = n / base
 ...1f0: c0070202    OR $7,$2,$2
 ...1f4: fe010006    GET $1,:rR % n = n % base
 ...1f8: f304fff9    PUSHJ $4,putu % putu(term,t,base)
 ...1fc: c0050000  1H OR $5,$0,$0
 ...200: f506ff9f    GETA $6,hexch
 ...204: 82060601    LDBU $6,$6,$1
 ...208: f204xxxx    PUSHJ $4,putc % putc(term,hexch[n])
 ...20c: f6040003    PUT :rJ,$3 % restore rJ
 ...210: f8000000    POP 0,0
                   
                   % octa gets(octa term,char *dst,octa max)
 ...214: fe030004  gets GET $3,:rJ % save rJ
 ...218: 23040100    ADDU $4,$1,0
 ...21c: 31050201  1H CMP $5,$2,1
 ...220: 4c05xxxx    BNP $5,2F % if(max <= 1) goto 1F
 ...224: 23060000    ADDU $6,$0,0
 ...228: f205xxxx    PUSHJ $5,getc % call getc(term)
 ...22c: 23070000    ADDU $7,$0,0
 ...230: 23080500    ADDU $8,$5,0
 ...234: f206xxxx    PUSHJ $6,putc % call putc(term,c)
 ...238: 3106050d    CMP $6,$5,#0D % c == \n?
 ...23c: 4206xxxx    BZ $6,1F % if so, stop
 ...240: a3050100    STBU $5,$1,0 % otherwise, store char
 ...244: 23010101    ADDU $1,$1,1 % to next
 ...248: 25020201    SUB $2,$2,1 % max--
 ...24c: f1fffff4    JMP 1B
 ...250: 23060000  2H ADDU $6,$0,0
 ...254: e307000d    SET $7,#0D
 ...258: f205xxxx    PUSHJ $5,putc % call putc(term,'\n')
 ...25c: 23060000  1H ADDU $6,$0,0
 ...260: e307000a    SET $7,#0A
 ...264: f205xxxx    PUSHJ $5,putc % call putc(term,'\r')
 ...268: a30a0100    STBU $10,$1,0 % null-termination
 ...26c: 26000104    SUBU $0,$1,$4 % determine length
 ...270: f6040003    PUT :rJ,$3 % restore rJ
 ...274: f8010000    POP 1,0 % return length
                   
                   % octa getc(octa term)
 ...278: e0018002  getc SETH $1,#8002 % base address: #8002000000000000
 ...27c: 39000020    SL $0,$0,32 % or in terminal-number
 ...280: c0010100    OR $1,$1,$0 % -> #8002000100000000 for term 1, e.g.
 ...284: 8f020100  1H LDOU $2,$1,#0 % read ctrl-reg
 ...288: c9020201    AND $2,$2,#1 % extract RDY-bit
 ...28c: 5302fffe    PBZ $2,1B % wait until its set
 ...290: 8f000108    LDOU $0,$1,#8 % load char
 ...294: f8010000    POP 1,0 % return it
                   
                   % void puts(octa term,char *string)
 ...298: fe020004  puts GET $2,:rJ % save rJ
 ...29c: 83050100  1H LDBU $5,$1,0 % load char from string
 ...2a0: 4205xxxx    BZ $5,2F % if its 0, we are done
 ...2a4: 23040000    ADDU $4,$0,0
 ...2a8: f203xxxx    PUSHJ $3,putc % call putc(c)
 ...2ac: 23010101    ADDU $1,$1,1 % to next char
 ...2b0: f1fffffb    JMP 1B
 ...2b4: f6040002  2H PUT :rJ,$2 % restore rJ
 ...2b8: f8000000    POP 0,0
                   
                   % void putc(octa term,octa character)
 ...2bc: e0028002  putc SETH $2,#8002 % base address: #8002000000000000
 ...2c0: 39000020    SL $0,$0,32 % or in terminal-number
 ...2c4: c0020200    OR $2,$2,$0 % -> #8002000100000000 for term 1, e.g.
 ...2c8: 8f030210  1H LDOU $3,$2,#10 % read ctrl-reg
 ...2cc: c9030301    AND $3,$3,#1 % exract RDY-bit
 ...2d0: 5303fffe    PBZ $3,1B % wait until its set
 ...2d4: af010218    STOU $1,$2,#18 % write char
 ...2d8: f8000000    POP 0,0
                   
                   % void oputs(char *string)
 ...2dc: fe010004  oputs GET $1,:rJ % save rJ
 ...2e0: 83030000  1H LDBU $3,$0,0 % load char from string
 ...2e4: 4203xxxx    BZ $3,2F % if its 0, we are done
 ...2e8: f202xxxx    PUSHJ $2,oputc % call oputc(c)
 ...2ec: 23000001    ADDU $0,$0,1 % to next char
 ...2f0: f1fffffc    JMP 1B
 ...2f4: f6040001  2H PUT :rJ,$1 % restore rJ
 ...2f8: f8000000    POP 0,0
                   
                   % void oputc(octa character)
 ...2fc: e0018004  oputc SETH $1,#8004 % base address: #8004000000000000
 ...300: af000100    STOU $0,$1,0 % write char
 ...304: f8000000    POP 0,0
                   
                     PREFIX :
                   # 66 "manual/cswap.mms" 2

Symbol table:
 CMPLOC = #0000000000008000 (2)
 DTRAP = #000000000000f000 (5)
 Main = #0000000000001000 (1)
 UNLCK = #000000000000000b (4)
 WAIT = #0000000000000000 (3)
 io:_putfn = #0000000000001150 (15)
 io:getc = #0000000000001278 (19)
 io:gets = #0000000000001214 (18)
 io:hexch = #000000000000107c (10)
 io:inf = #0000000000001094 (12)
 io:nan = #0000000000001090 (11)
 io:oputc = #00000000000012fc (21)
 io:oputs = #00000000000012dc (20)
 io:putc = #00000000000012bc (14)
 io:putf = #0000000000001098 (13)
 io:putn = #0000000000001194 (16)
 io:puts = #0000000000001298 (7)
 io:putu = #00000000000011dc (17)
 loop = #0000000000001058 (8)
 reset = #0000000000001040 (6)
