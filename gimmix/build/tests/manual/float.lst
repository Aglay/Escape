                   # 1 "manual/float.mms"
                   # 1 "<built-in>"
                   # 1 "<command-line>"
                   # 1 "manual/float.mms"
                   %
                   % float.mms -- some fun with floats
                   %
                   
                     % stack for unsave
                     LOC #600000
0000000000600000:    OCTA #0 % rL
 ...000: 00000000
 ...004: 00000000
 ...008: 00000000    OCTA #0 % $255 = ff
 ...00c: 00000000
 ...010: 00000000    OCTA #0 % rB
 ...014: 00000000
 ...018: 00000000    OCTA #0 % rD
 ...01c: 00000000
 ...020: 00000000    OCTA #0 % rE
 ...024: 00000000
 ...028: 00000000    OCTA #0 % rH
 ...02c: 00000000
 ...030: 00000000    OCTA #0 % rJ
 ...034: 00000000
 ...038: 00000000    OCTA #0 % rM
 ...03c: 00000000
 ...040: 00000000    OCTA #0 % rP
 ...044: 00000000
 ...048: 00000000    OCTA #0 % rR
 ...04c: 00000000
 ...050: 00000000    OCTA #0 % rW
 ...054: 00000000
 ...058: 00000000    OCTA #0 % rX
 ...05c: 00000000
 ...060: 00000000    OCTA #0 % rY
 ...064: 00000000
 ...068: 00000000    OCTA #0 % rZ
 ...06c: 00000000
 ...070: ff000000  ADDR OCTA #FF00000000000000 % rG | rA
 ...074: 00000000
                   
                     LOC #1000
0000000000001000:    JMP Main
 ...000: f0xxxxxx
                   
 ...004: 506c6561  WELC BYTE "Please enter a float:",#d,#a,0
 ...008: 73652065
 ...00c: 6e746572
 ...010: 20612066
 ...014: 6c6f6174
 ...018: 3a0d0a00
 ...01c: 3e2000    MSG BYTE "> ",0
 ...01f:       73  SQRT BYTE "sqrt(",0
 ...020: 71727428
 ...024: 00      
 ...025:   293d00  RBR BYTE ")=",0
 ...028: 706f7728  POW1 BYTE "pow(",0
 ...02c: 00      
 ...02d:   2c3229  POW2 BYTE ",2)=",0
 ...030: 3d00    
 ...032:     0d0a  CRLF BYTE #d,#a,0
 ...034: 00      
 ...035:   00      BUF BYTE 0
                     LOC @+31
                   
                   
                     % set the stackpointer her because when printing floats the recursion may be quite deep
 ...058: e0008000  Main SETH $0,#8000
 ...05c: ea006000    ORML $0,#6000
******************   ORL $0,ADDR
************ warning: YZ field doesn't fit in two bytes
 ...060: eb000070
 ...064: fb000000    UNSAVE $0
                   
 ...068: e3010000    SET $1,0
 ...06c: e3021004    SET $2,WELC
 ...070: e8028000    ORH $2,#8000
 ...074: f200xxxx    PUSHJ $0,io:puts
                   
 ...078: e301101c  loop SET $1,MSG
 ...07c: f200xxxx    PUSHJ $0,putmsg
                   
 ...080: e3010000    SET $1,0
 ...084: e3021035    SET $2,BUF
 ...088: e8028000    ORH $2,#8000
 ...08c: e303001e    SET $3,30
 ...090: f200xxxx    PUSHJ $0,io:gets
                   
 ...094: e3011035    SET $1,BUF
 ...098: e8018000    ORH $1,#8000
 ...09c: f200xxxx    PUSHJ $0,str:tofloat
                   
 ...0a0: e302101f    SET $2,SQRT
 ...0a4: f201xxxx    PUSHJ $1,putmsg
                   
 ...0a8: e3020000    SET $2,0
 ...0ac: c1030000    SET $3,$0
 ...0b0: f201xxxx    PUSHJ $1,io:putf
                   
 ...0b4: e3021025    SET $2,RBR
 ...0b8: f201xxxx    PUSHJ $1,putmsg
                   
 ...0bc: e3020000    SET $2,0
 ...0c0: 15030000    FSQRT $3,$0
 ...0c4: f201xxxx    PUSHJ $1,io:putf
                   
 ...0c8: e3021032    SET $2,CRLF
 ...0cc: f201xxxx    PUSHJ $1,putmsg
                   
 ...0d0: e3021028    SET $2,POW1
 ...0d4: f201xxxx    PUSHJ $1,putmsg
                   
 ...0d8: e3020000    SET $2,0
 ...0dc: c1030000    SET $3,$0
 ...0e0: f201xxxx    PUSHJ $1,io:putf
                   
 ...0e4: e302102d    SET $2,POW2
 ...0e8: f201xxxx    PUSHJ $1,putmsg
                   
 ...0ec: e3020000    SET $2,0
 ...0f0: 10030000    FMUL $3,$0,$0
 ...0f4: f201xxxx    PUSHJ $1,io:putf
                   
 ...0f8: e3021032    SET $2,CRLF
 ...0fc: f201xxxx    PUSHJ $1,putmsg
                   
 ...100: f1ffffde    JMP loop
                   
                   % void putmsg(char *msg)
 ...104: fe010004  putmsg GET $1,rJ
 ...108: e3030000    SET $3,0
 ...10c: c1040000    SET $4,$0
 ...110: e8048000    ORH $4,#8000
 ...114: f202xxxx    PUSHJ $2,io:puts
 ...118: f6040001    PUT rJ,$1
 ...11c: f8000000    POP 0,0
                   
                   # 1 "manual/string.mmi" 1
                   %
                   % some string-functions
                   %
                   
                     PREFIX str:
                   
                     LOC @+(4-@)&3
 ...120: 6e616e00  nan BYTE "nan",0
 ...124: 696e6600  inf BYTE "inf",0
                   
                   % void copy(char *dst,char *src)
 ...128: e3020000  copy SET $2,0
 ...12c: 82030102  1H LDBU $3,$1,$2
 ...130: 4203xxxx    BZ $3,1F
 ...134: a2030002    STBU $3,$0,$2
 ...138: 23020201    ADDU $2,$2,1
 ...13c: f1fffffc    JMP 1B
 ...140: f8010000  1H POP 1,0
                   
                   % octa tofloat(char *str)
 ...144: fe010004  tofloat GET $1,:rJ
 ...148: c1020000    SET $2,$0 % str
 ...14c: e3000000    SET $0,0 % res = 0
 ...150: 83040200    LDBU $4,$2,0 % $4 = *str
 ...154: 4204xxxx    BZ $4,2F % if 0, quit
 ...158: 3305042d    CMPU $5,$4,'-'
 ...15c: 4a05xxxx    BNZ $5,1F
 ...160: 35030001    NEG $3,0,1 % save that its negative
 ...164: 23020201    ADDU $2,$2,1 % str++
 ...168: c1050200  1H SET $5,$2
 ...16c: f506ffed    GETA $6,nan
 ...170: f204xxxx    PUSHJ $4,compare % compare to "nan"
 ...174: 4a04xxxx    BNZ $4,1F
 ...178: e0007ff8    SETH $0,#7FF8 % nan
 ...17c: f0xxxxxx    JMP 2F
 ...180: c1050200  1H SET $5,$2
 ...184: f506ffe8    GETA $6,inf
 ...188: f204xxxx    PUSHJ $4,compare % compare to "inf"
 ...18c: 4a04xxxx    BNZ $4,1F
 ...190: e0007ff0    SETH $0,#7FF0 % inf
 ...194: f0xxxxxx    JMP 2F
 ...198: 83050200  1H LDBU $5,$2,0 % $5 = *str
 ...19c: 4205xxxx    BZ $5,2F % if 0, quit
 ...1a0: f204xxxx    PUSHJ $4,_getd % $4 = _getd($5)
 ...1a4: 4004xxxx    BN $4,3F % if < 0, its no digit
 ...1a8: e0054024    SETH $5,#4024 % 10.0
 ...1ac: 10000005    FMUL $0,$0,$5 % res *= 10
 ...1b0: 0a050004    FLOTU $5,$4
 ...1b4: 04000005    FADD $0,$0,$5 % res += $4
 ...1b8: 23020201    ADDU $2,$2,1 % str++
 ...1bc: f1fffff7    JMP 1B
 ...1c0: 83050200  3H LDBU $5,$2,0 % $5 = *str
 ...1c4: 3304052e    CMPU $4,$5,'.' % its no digit; check if its '.'
 ...1c8: 4a04xxxx    BNZ $4,2F % if not, we are done
 ...1cc: e0044024    SETH $4,#4024 % mul = 10.0
 ...1d0: 23020201    ADDU $2,$2,1 % str++
 ...1d4: 83060200  4H LDBU $6,$2,0 % $6 = *str
 ...1d8: 4206xxxx    BZ $6,2F % if 0, quit
 ...1dc: f205xxxx    PUSHJ $5,_getd % $5 = _getd($6)
 ...1e0: 4005xxxx    BN $5,2F % if < 0, its no digit
 ...1e4: 0a050005    FLOTU $5,$5
 ...1e8: 14050504    FDIV $5,$5,$4 % $5 /= mul
 ...1ec: 04000005    FADD $0,$0,$5 % res += $5
 ...1f0: e0054024    SETH $5,#4024 % 10.0
 ...1f4: 10040405    FMUL $4,$4,$5 % mul *= 10
 ...1f8: 23020201    ADDU $2,$2,1 % str++
 ...1fc: f1fffff6    JMP 4B
 ...200: 4803xxxx  2H BNN $3,5F % negative?
 ...204: e8008000    ORH $0,#8000 % '-', so negate the float
 ...208: f6040001  5H PUT :rJ,$1
 ...20c: f8010000    POP 1,0
                   
                   % octa _getd(char x)
 ...210: 33010030  _getd CMPU $1,$0,'0'
 ...214: 4001xxxx    BN $1,1F
 ...218: 33010039    CMPU $1,$0,'9'
 ...21c: 5c01xxxx    PBNP $1,2F
 ...220: 35000001  1H NEG $0,0,1
 ...224: f0xxxxxx    JMP 3F
 ...228: 27000030  2H SUBU $0,$0,'0'
 ...22c: f8010000  3H POP 1,0
                   
                   % octa touint(char *str,octa base)
 ...230: c1020000  touint SET $2,$0
 ...234: e3000000    SET $0,0
 ...238: 83030200  3H LDBU $3,$2,0
 ...23c: 33040300    CMPU $4,$3,0
 ...240: 4204xxxx    BZ $4,1F % if $3 == 0, goto 1F (done)
 ...244: 33040339    CMPU $4,$3,'9'
 ...248: 4404xxxx    BP $4,2F % if $3 > '9', goto 2F
 ...24c: 33040330    CMPU $4,$3,'0'
 ...250: 4004xxxx    BN $4,1F % if $3 < '0', goto 1F (error)
                     % its '0'..'9'
 ...254: 27030330    SUBU $3,$3,'0' % $3 -= '0'
 ...258: f0xxxxxx    JMP 4F
                     % its > '9'
 ...25c: 33040341  2H CMPU $4,$3,'A'
 ...260: 4004xxxx    BN $4,1F % if $3 < 'A', goto 1F (error)
 ...264: 33040346    CMPU $4,$3,'F'
 ...268: 4404xxxx    BP $4,5F % if $3 > 'F', goto 5F
                     % its 'A'..'F'
 ...26c: 27030337    SUBU $3,$3,'A'-10 % $3 -= 'A'-10
 ...270: f0xxxxxx    JMP 4F
                     % its > 'F'
 ...274: 33040361  5H CMPU $4,$3,'a'
 ...278: 4004xxxx    BN $4,1F % if $3 < 'a', goto 1F (error)
 ...27c: 33040366    CMPU $4,$3,'f'
 ...280: 4404xxxx    BP $4,1F % if $3 > 'f', goto 1F (error)
                     % its 'a'..'f'
 ...284: 27030357    SUBU $3,$3,'a'-10 % $3 -= 'a'-10
 ...288: 32040301  4H CMPU $4,$3,$1
 ...28c: 4804xxxx    BNN $4,1F % if $3 >= base, goto 1F (error)
 ...290: 1a000001    MULU $0,$0,$1 % $0 *= base
 ...294: 22000003    ADDU $0,$0,$3 % $0 += $3
 ...298: 23020201    ADDU $2,$2,1 % str1++
 ...29c: f1ffffe7    JMP 3B
 ...2a0: f8010000  1H POP 1,0
                   
                   % octa compare(char *str1,char *str2)
 ...2a4: e3020000  compare SET $2,0 % i = 0
 ...2a8: f0xxxxxx    JMP 1F
 ...2ac: 23020201  3H ADDU $2,$2,1 % i++
 ...2b0: 82030002  1H LDBU $3,$0,$2 % c1 = str[i]
 ...2b4: 82040102    LDBU $4,$1,$2 % c2 = str[i]
 ...2b8: 32050304    CMPU $5,$3,$4 % compare c1 with c2
 ...2bc: 4a05xxxx    BNZ $5,2F % if c1 != c2, goto 2
 ...2c0: 5b03fffb    PBNZ $3,3B % if c1 != 0, goto 3
 ...2c4: c1000500  2H SET $0,$5 % return compare-result
 ...2c8: f8010000    POP 1,0
                   
                     PREFIX :
                   # 107 "manual/float.mms" 2
                   # 1 "manual/io.mmi" 1
                   %
                   % some io-functions
                   %
                   
                   % terminal 0 rcvr ctrl: #8002000000000000
                   % terminal 0 rcvr data: #8002000000000008
                   % terminal 0 xmtr ctrl: #8002000000000010
                   % terminal 0 xmtr data: #8002000000000018
                   % terminal 1 rcvr ctrl: #8002000100000000
                   % terminal 1 rcvr data: #8002000100000008
                   % terminal 1 xmtr ctrl: #8002000100000010
                   % terminal 1 xmtr data: #8002000100000018
                   
                     PREFIX io:
                   
 ...2cc: 30313233  hexch BYTE "0123456789ABCDEF",0
 ...2d0: 34353637
 ...2d4: 38394142
 ...2d8: 43444546
 ...2dc: 00      
                     LOC @+(4-@)&3
 ...2e0: 6e616e00  nan BYTE "nan",0
 ...2e4: 696e6600  inf BYTE "inf",0
                   
                   % void putf(octa term,octa f)
 ...2e8: fe020004  putf GET $2,:rJ % save rJ
 ...2ec: 4801xxxx    BNN $1,1F % f >= 0?
 ...2f0: c1040000    SET $4,$0
 ...2f4: e305002d    SET $5,'-'
 ...2f8: f203xxxx    PUSHJ $3,putc % putc(term,'-')
 ...2fc: ec018000    ANDNH $1,#8000 % f = -f
 ...300: e0037ff0  1H SETH $3,#7FF0
 ...304: c8040103    AND $4,$1,$3 % check exponent
 ...308: 32050403    CMPU $5,$4,$3
 ...30c: 4a05xxxx    BNZ $5,3F % if not #7FF, its no nan and no inf
 ...310: 35030001    NEG $3,0,1
 ...314: ec03fff0    ANDNH $3,#FFF0 % fraction-mask
 ...318: c8040103    AND $4,$1,$3
 ...31c: 4a04xxxx    BNZ $4,2F % if fraction not zero, its nan
 ...320: c1040000    SET $4,$0
 ...324: f505fff0    GETA $5,inf
 ...328: f203xxxx    PUSHJ $3,puts % puts(term,"inf")
 ...32c: f0xxxxxx    JMP 6F
 ...330: c1040000  2H SET $4,$0
 ...334: f505ffeb    GETA $5,nan
 ...338: f203xxxx    PUSHJ $3,puts % puts(term,"nan")
 ...33c: f0xxxxxx    JMP 6F
 ...340: c1040000  3H SET $4,$0
 ...344: c1050100    SET $5,$1
 ...348: f203xxxx    PUSHJ $3,_putfn % _putfn(term,f)
 ...34c: c1040000    SET $4,$0
 ...350: e305002e    SET $5,'.'
 ...354: f203xxxx    PUSHJ $3,putc % putc(term,'.')
 ...358: e0044024    SETH $4,#4024 % 10.0
 ...35c: 17030101    FINT $3,:ROUND_OFF,$1
 ...360: 06010103    FSUB $1,$1,$3 % f -= (int)f
                     % multiply it with 10 until the fraction is gone
 ...364: 17030101    FINT $3,:ROUND_OFF,$1
 ...368: 32030103  4H CMPU $3,$1,$3
 ...36c: 4203xxxx    BZ $3,5F % if fraction == 0, we are done
 ...370: 10010104    FMUL $1,$1,$4 % f *= 10
 ...374: 17030101    FINT $3,:ROUND_OFF,$1
 ...378: 4b03fffc    BNZ $3,4B % if its still zero, print the 0
 ...37c: c1060000    SET $6,$0
 ...380: e3070030    SET $7,'0'
 ...384: f205xxxx    PUSHJ $5,putc % putc(term,'0')
 ...388: f1fffff8    JMP 4B
 ...38c: c1040000  5H SET $4,$0
 ...390: c1050100    SET $5,$1
 ...394: f203xxxx    PUSHJ $3,_putfn % finally, print it
 ...398: f6040002  6H PUT :rJ,$2 % restore rJ
 ...39c: f8000000    POP 0,0
                   
                   % void _putfn(octa term,octa f)
 ...3a0: fe020004  _putfn GET $2,:rJ
 ...3a4: 17010101    FINT $1,:ROUND_OFF,$1 % f = (int)f
 ...3a8: e0034024    SETH $3,#4024 % 10.0
 ...3ac: 01040103    FCMP $4,$1,$3
 ...3b0: 4004xxxx    BN $4,1F % if g < 10, stop recursion
 ...3b4: 14060103    FDIV $6,$1,$3 % g = f / 10
 ...3b8: c1050000    SET $5,$0
 ...3bc: f304fff9    PUSHJ $4,_putfn % _putfn(g)
 ...3c0: 16050103  1H FREM $5,$1,$3 % x = f % 10
 ...3c4: 4805xxxx    BNN $5,2F % its negative if its >= 5, (-5, -4, ...)
 ...3c8: 04050305    FADD $5,$3,$5 % so, x = 10 + x
 ...3cc: c1040000  2H SET $4,$0
 ...3d0: 05050005    FIX $5,$5
 ...3d4: 23050530    ADDU $5,$5,'0' % x += '0'
 ...3d8: f203xxxx    PUSHJ $3,putc % putc(term,x)
 ...3dc: f6040002    PUT :rJ,$2 % restore rJ
 ...3e0: f8000000    POP 0,0
                   
                   % void putn(octa term,octa n)
 ...3e4: fe020004  putn GET $2,:rJ % save rJ
 ...3e8: 5801xxxx    PBNN $1,1F % n < 0?
 ...3ec: c0040000    OR $4,$0,$0
 ...3f0: e305002d    SET $5,'-'
 ...3f4: f203xxxx    PUSHJ $3,putc % putc(term,'-')
 ...3f8: 34010001    NEG $1,0,$1 % n = -n
 ...3fc: 3303010a  1H CMPU $3,$1,10
 ...400: 5003xxxx    PBN $3,1F % n >= 10?
 ...404: c0040000    OR $4,$0,$0
 ...408: 1d05010a    DIV $5,$1,10 % t = n / 10
 ...40c: fe010006    GET $1,:rR % n = n % 10
 ...410: f303fff5    PUSHJ $3,putn % putn(term,t)
 ...414: c0040000  1H OR $4,$0,$0
 ...418: c0050101    OR $5,$1,$1
 ...41c: 23050530    ADDU $5,$5,48 % char + '0'
 ...420: f203xxxx    PUSHJ $3,putc % putc(term,n)
 ...424: f6040002    PUT :rJ,$2 % restore rJ
 ...428: f8000000    POP 0,0
                   
                   % void putu(octa term,octa u,octa base)
 ...42c: fe030004  putu GET $3,:rJ % save rJ
 ...430: 32040102    CMPU $4,$1,$2
 ...434: 5004xxxx    PBN $4,1F % n >= base?
 ...438: c0050000    OR $5,$0,$0
 ...43c: 1e060102    DIVU $6,$1,$2 % t = n / base
 ...440: c0070202    OR $7,$2,$2
 ...444: fe010006    GET $1,:rR % n = n % base
 ...448: f304fff9    PUSHJ $4,putu % putu(term,t,base)
 ...44c: c0050000  1H OR $5,$0,$0
 ...450: f506ff9f    GETA $6,hexch
 ...454: 82060601    LDBU $6,$6,$1
 ...458: f204xxxx    PUSHJ $4,putc % putc(term,hexch[n])
 ...45c: f6040003    PUT :rJ,$3 % restore rJ
 ...460: f8000000    POP 0,0
                   
                   % octa gets(octa term,char *dst,octa max)
 ...464: fe030004  gets GET $3,:rJ % save rJ
 ...468: 23040100    ADDU $4,$1,0
 ...46c: 31050201  1H CMP $5,$2,1
 ...470: 4c05xxxx    BNP $5,2F % if(max <= 1) goto 1F
 ...474: 23060000    ADDU $6,$0,0
 ...478: f205xxxx    PUSHJ $5,getc % call getc(term)
 ...47c: 23070000    ADDU $7,$0,0
 ...480: 23080500    ADDU $8,$5,0
 ...484: f206xxxx    PUSHJ $6,putc % call putc(term,c)
 ...488: 3106050d    CMP $6,$5,#0D % c == \n?
 ...48c: 4206xxxx    BZ $6,1F % if so, stop
 ...490: a3050100    STBU $5,$1,0 % otherwise, store char
 ...494: 23010101    ADDU $1,$1,1 % to next
 ...498: 25020201    SUB $2,$2,1 % max--
 ...49c: f1fffff4    JMP 1B
 ...4a0: 23060000  2H ADDU $6,$0,0
 ...4a4: e307000d    SET $7,#0D
 ...4a8: f205xxxx    PUSHJ $5,putc % call putc(term,'\n')
 ...4ac: 23060000  1H ADDU $6,$0,0
 ...4b0: e307000a    SET $7,#0A
 ...4b4: f205xxxx    PUSHJ $5,putc % call putc(term,'\r')
 ...4b8: a30a0100    STBU $10,$1,0 % null-termination
 ...4bc: 26000104    SUBU $0,$1,$4 % determine length
 ...4c0: f6040003    PUT :rJ,$3 % restore rJ
 ...4c4: f8010000    POP 1,0 % return length
                   
                   % octa getc(octa term)
 ...4c8: e0018002  getc SETH $1,#8002 % base address: #8002000000000000
 ...4cc: 39000020    SL $0,$0,32 % or in terminal-number
 ...4d0: c0010100    OR $1,$1,$0 % -> #8002000100000000 for term 1, e.g.
 ...4d4: 8f020100  1H LDOU $2,$1,#0 % read ctrl-reg
 ...4d8: c9020201    AND $2,$2,#1 % extract RDY-bit
 ...4dc: 5302fffe    PBZ $2,1B % wait until its set
 ...4e0: 8f000108    LDOU $0,$1,#8 % load char
 ...4e4: f8010000    POP 1,0 % return it
                   
                   % void puts(octa term,char *string)
 ...4e8: fe020004  puts GET $2,:rJ % save rJ
 ...4ec: 83050100  1H LDBU $5,$1,0 % load char from string
 ...4f0: 4205xxxx    BZ $5,2F % if its 0, we are done
 ...4f4: 23040000    ADDU $4,$0,0
 ...4f8: f203xxxx    PUSHJ $3,putc % call putc(c)
 ...4fc: 23010101    ADDU $1,$1,1 % to next char
 ...500: f1fffffb    JMP 1B
 ...504: f6040002  2H PUT :rJ,$2 % restore rJ
 ...508: f8000000    POP 0,0
                   
                   % void putc(octa term,octa character)
 ...50c: e0028002  putc SETH $2,#8002 % base address: #8002000000000000
 ...510: 39000020    SL $0,$0,32 % or in terminal-number
 ...514: c0020200    OR $2,$2,$0 % -> #8002000100000000 for term 1, e.g.
 ...518: 8f030210  1H LDOU $3,$2,#10 % read ctrl-reg
 ...51c: c9030301    AND $3,$3,#1 % exract RDY-bit
 ...520: 5303fffe    PBZ $3,1B % wait until its set
 ...524: af010218    STOU $1,$2,#18 % write char
 ...528: f8000000    POP 0,0
                   
                   % void oputs(char *string)
 ...52c: fe010004  oputs GET $1,:rJ % save rJ
 ...530: 83030000  1H LDBU $3,$0,0 % load char from string
 ...534: 4203xxxx    BZ $3,2F % if its 0, we are done
 ...538: f202xxxx    PUSHJ $2,oputc % call oputc(c)
 ...53c: 23000001    ADDU $0,$0,1 % to next char
 ...540: f1fffffc    JMP 1B
 ...544: f6040001  2H PUT :rJ,$1 % restore rJ
 ...548: f8000000    POP 0,0
                   
                   % void oputc(octa character)
 ...54c: e0018004  oputc SETH $1,#8004 % base address: #8004000000000000
 ...550: af000100    STOU $0,$1,0 % write char
 ...554: f8000000    POP 0,0
                   
                     PREFIX :
                   # 107 "manual/float.mms" 2

Symbol table:
 ADDR = #0000000000600070 (2)
 BUF = #0000000000001035 (10)
 CRLF = #0000000000001032 (9)
 MSG = #000000000000101c (4)
 Main = #0000000000001058 (1)
 POW1 = #0000000000001028 (7)
 POW2 = #000000000000102d (8)
 RBR = #0000000000001025 (6)
 SQRT = #000000000000101f (5)
 WELC = #0000000000001004 (3)
 io:_putfn = #00000000000013a0 (30)
 io:getc = #00000000000014c8 (33)
 io:gets = #0000000000001464 (14)
 io:hexch = #00000000000012cc (26)
 io:inf = #00000000000012e4 (28)
 io:nan = #00000000000012e0 (27)
 io:oputc = #000000000000154c (35)
 io:oputs = #000000000000152c (34)
 io:putc = #000000000000150c (29)
 io:putf = #00000000000012e8 (16)
 io:putn = #00000000000013e4 (31)
 io:puts = #00000000000014e8 (11)
 io:putu = #000000000000142c (32)
 loop = #0000000000001078 (12)
 putmsg = #0000000000001104 (13)
 str:_getd = #0000000000001210 (22)
 str:compare = #00000000000012a4 (21)
 str:copy = #0000000000001128 (20)
 str:inf = #0000000000001124 (19)
 str:nan = #0000000000001120 (18)
 str:tofloat = #0000000000001144 (15)
 str:touint = #0000000000001230 (23)
