                   # 1 "user/pushpop-stack.mms"
                   # 1 "<built-in>"
                   # 1 "<command-line>"
                   # 1 "user/pushpop-stack.mms"
                   %
                   % pushpop-stack.mms -- tests push/pop with stack-usage
                   %
                   
                     LOC #1000
                   
0000000000001000:  Main PUT rL,0 % discard arguments in mmix/mmmix
 ...000: f7140000
                   
                     % load/store on stack
 ...004: e3001234    SET $0,#1234
 ...008: e3014567    SET $1,#4567
 ...00c: e3fe0010    SET $254,#10
 ...010: f2ffxxxx    PUSHJ $255,1F % all 256 regs in use -> 1 is pushed
 ...014: af000200    STOU $0,$2,#0
 ...018: af010208    STOU $1,$2,#8
 ...01c: fe000014    GET $0,rL % 255
 ...020: af000210    STOU $0,$2,#10
 ...024: affe0218    STOU $254,$2,#18 % #10
 ...028: f0xxxxxx    JMP 2F
                   
 ...02c: e3001234  1H SET $0,#1234 % another one is pushed
 ...030: f8000000    POP 0,0 % restores both regs
                   
                   
                     % passing an arg to a nested func and returning it back
 ...034: f7140000  2H PUT rL,0 % discard regs
 ...038: e3016666    SET $1,#6666
 ...03c: f200xxxx    PUSHJ $0,3F
 ...040: af000220    STOU $0,$2,#20 % #6666
 ...044: f0xxxxxx    JMP 5F
                   
 ...048: 21020000  3H ADD $2,$0,0 % save arg
 ...04c: fe000004    GET $0,rJ % save rJ
 ...050: f201xxxx    PUSHJ $1,4F % call 4F(arg)
 ...054: f6040000    PUT rJ,$0 % restore rJ
 ...058: 21000100    ADD $0,$1,0 % return arg
 ...05c: f8010000    POP 1,0
                   
 ...060: f8010000  4H POP 1,0 % return arg
                   
 ...064: b9200200  5H SYNCD #20,$2,0 % flush to mem (for mmmix)
 ...068: 00000000    TRAP 0

Symbol table:
 Main = #0000000000001000 (1)
