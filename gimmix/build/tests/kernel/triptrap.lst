                   # 1 "kernel/triptrap.mms"
                   # 1 "<built-in>"
                   # 1 "<command-line>"
                   # 1 "kernel/triptrap.mms"
                   %
                   % triptrap.mms -- test traps in trips
                   %
                   
                     % paging setup: 1MiB pages, 1024 pages in seg0
                     % one PTE in root-location that maps 0 to 0
                     LOC #8000
0000000000008000:  RV OCTA #1000140000090000
 ...000: 10001400
 ...004: 00090000
                     LOC #90000
0000000000090000:  PTE OCTA #0000000000000007
 ...000: 00000000
 ...004: 00000007
                   
                     % forced trap addresses
                     LOC #500000
                   
                     % test some values that are affected by a trap
0000000000500000:  ATRAP GET $134,rXX
 ...000: fe86001d
 ...004: fe87001c    GET $135,rWW
 ...008: fe88001e    GET $136,rYY
 ...00c: fe89001f    GET $137,rZZ
 ...010: fe8a0007    GET $138,rBB
 ...014: 218bff00    ADD $139,$255,0
 ...018: e3ff000f    SETL $255,#000F
 ...01c: e9ff00ff    ORMH $255,#00FF % set rK
 ...020: f9000001    RESUME 1
                   
                     % forced trip address
                     LOC #0
                   
                     % test some values that are affected by a trip
0000000000000000:  ATRIP GET $128,rX
 ...000: fe800019
 ...004: fe810018    GET $129,rW
 ...008: fe82001a    GET $130,rY
 ...00c: fe83001b    GET $131,rZ
 ...010: fe840000    GET $132,rB
 ...014: 2185ff00    ADD $133,$255,0
                   
                     % jump to our handler
 ...018: f280xxxx    PUSHJ $128,Handler
 ...01c: f60400ff    PUT rJ,$255
 ...020: feff0000    GET $255,rB
 ...024: f9000000    RESUME 0
                   
                     % do a trap and test if the values have been restored afterwards
 ...028: 00010203  Handler TRAP 1,2,3
 ...02c: fe8d0004    GET $141,rJ
 ...030: fe8e000f    GET $142,rK
 ...034: f8000000    POP 0
                   
                     LOC #1000
                   
                   
                     % first setup basic paging: 0 mapped to 0
0000000000001000:  Main SETL $0,RV
 ...000: e3008000
 ...004: e8008000    ORH $0,#8000
 ...008: 8f000000    LDOU $0,$0
 ...00c: f6120000    PUT rV,$0
 ...010: 8f000100    LDOU $0,$1,0
                     % global registers are better here because of PUSH/POP
 ...014: f7130080    PUT rG,128
                     % setup rT
 ...018: e0008000    SETH $0,#8000
 ...01c: e9000000    ORMH $0,ATRAP>>32
 ...020: ea000050    ORML $0,ATRAP>>16
******************   ORL $0,ATRAP>>0
************ warning: YZ field doesn't fit in two bytes
 ...024: eb000000
 ...028: f60d0000    PUT rT,$0
                   
                     % set some values that will be changed
 ...02c: e300000f    SETL $0,#000F
 ...030: e90000ff    ORMH $0,#00FF % have to be set in usermode
 ...034: c1ff0000    SET $255,$0
 ...038: f70f000f    PUT rK,#0F
 ...03c: f7040012    PUT rJ,#12
 ...040: e3010055    SET $1,#55
 ...044: e3020066    SET $2,#66
 ...048: e3030077    SET $3,#77
                   
                     % now go to user-mode (we are at #8000000000001000 atm)
                     % thats required to get trips working
 ...04c: e3042000    SET $4,#2000
 ...050: f61c0004    PUT rWW,$4
 ...054: e0048000    SETH $4,#8000
 ...058: f61d0004    PUT rXX,$4
 ...05c: f9000001    RESUME 1
                   
                     LOC #2000
                   
0000000000002000:    SET $255,#1234
 ...000: e3ff1234
 ...004: ff010203    TRIP 1,2,3
                   
                     % check if they have been restored
 ...008: 218fff00    ADD $143,$255,0
 ...00c: fe900004    GET $144,rJ
 ...010: fe91000f    GET $145,rK
                   
 ...014: 00000000    TRAP 0

Symbol table:
 ATRAP = #0000000000500000 (4)
 ATRIP = #0000000000000000 (5)
 Handler = #0000000000000028 (6)
 Main = #0000000000001000 (1)
 PTE = #0000000000090000 (3)
 RV = #0000000000008000 (2)
