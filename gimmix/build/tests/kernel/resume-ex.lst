                   # 1 "kernel/resume-ex.mms"
                   # 1 "<built-in>"
                   # 1 "<command-line>"
                   # 1 "kernel/resume-ex.mms"
                   %
                   % exceptions1.mms -- test exceptions in usermode
                   %
                   
                     % segmentsizes: 3,3,3,4; pageSize=2^13; r=0x90000; n=256
                     LOC #8000
0000000000008000:  RV OCTA #33340D0000090800
 ...000: 33340d00
 ...004: 00090800
                   
                     % -- PTEs to be able to execute the code --
                     LOC #00090000
0000000000090000:    OCTA #0000000000000801 % PTE 0 (#0000000000000000 .. #0000000000001FFF)
 ...000: 00000000
 ...004: 00000801
                     LOC #00090008
 ...008: 00000000    OCTA #0000000000002801 % PTE 1 (#0000000000002000 .. #0000000000003FFF)
 ...00c: 00002801
                   
                   
                     % dynamic trap address
                     LOC #800000
                   
0000000000800000:  ATRAP GET $252,rWW % get rWW - 4
 ...000: fefc001c
 ...004: 27fcfc04    SUBU $252,$252,4
 ...008: fefd0010    GET $253,rQ % or rQ in
 ...00c: c0fdfdfc    OR $253,$253,$252
 ...010: affdfe00    STOU $253,$254,0 % store it
 ...014: fefb001d    GET $251,rXX
 ...018: ecfb8000    ANDNH $251,#8000 % zero MSB (may be different, if mmmix continues the instr)
 ...01c: 3ffbfb20    SRU $251,$251,32 % use the upper 32 bit
 ...020: affbfe08    STOU $251,$254,8 % store it
 ...024: 42faxxxx    BZ $250,1F
 ...028: e3fb0000    SET $251,0
 ...02c: f0xxxxxx    JMP 2F
 ...030: fefb001e  1H GET $251,rYY
 ...034: affbfe10  2H STOU $251,$254,16 % store rYY
 ...038: fefb001f    GET $251,rZZ
 ...03c: affbfe18    STOU $251,$254,24 % store rZZ
 ...040: 21fefe20    ADD $254,$254,32
 ...044: f7100000    PUT rQ,0 % reset rQ
 ...048: fefd001d    GET $253,rXX
 ...04c: e8fd8000    ORH $253,#8000 % skip instruction
 ...050: f61d00fd    PUT rXX,$253
 ...054: e1ff00fe    SETMH $255,#00FE % rK
 ...058: f9000001    RESUME 1
                   
                   
                     LOC #1000
                   
                     % first setup basic paging: 0 mapped to 0
0000000000001000:  Main SETL $0,RV
 ...000: e3008000
 ...004: e8008000    ORH $0,#8000
 ...008: 8f000000    LDOU $0,$0
 ...00c: f6120000    PUT rV,$0
                   
                     % global registers are better here because of PUSH/POP
 ...010: f7130080    PUT rG,128
                     % setup rTT
 ...014: e0008000    SETH $0,#8000
 ...018: e9000000    ORMH $0,ATRAP>>32
 ...01c: ea000080    ORML $0,ATRAP>>16
******************   ORL $0,ATRAP>>0
************ warning: YZ field doesn't fit in two bytes
 ...020: eb000000
 ...024: f60e0000    PUT rTT,$0
                     % setup address for results
 ...028: e0fe8000    SETH $254,#8000
 ...02c: ebfe4000    ORL $254,#4000
                   
 ...030: e1ff00fe    SETMH $255,#00FE % rK
 ...034: f60f00ff    PUT rK,$255
                   
 ...038: f400xxxx    GETA $0,1F
 ...03c: f61c0000    PUT rWW,$0
 ...040: e0000000    SETH $0,#0000 % resume again
 ...044: ea008d00    ORML $0,#8D00
 ...048: eb000000    ORL $0,#0000 % LDOI $0,$0,0
 ...04c: f61d0000    PUT rXX,$0
 ...050: e3006000    SETL $0,#6000 % #6000
 ...054: f61e0000    PUT rYY,$0
 ...058: f71f0000    PUT rZZ,0
 ...05c: e1ff00fe    SETMH $255,#00FE % rK
 ...060: f9000001    RESUME 1
                   
 ...064: f400xxxx  1H GETA $0,2F
 ...068: f61c0000    PUT rWW,$0
 ...06c: e0000300    SETH $0,#0300 % resume trans
 ...070: ea008d00    ORML $0,#8D00
 ...074: eb000000    ORL $0,#0000 % LDOI $0,$0,0
 ...078: f61d0000    PUT rXX,$0
 ...07c: e3001000    SETL $0,#1000
 ...080: f61e0000    PUT rYY,$0
 ...084: e3001807    SETL $0,#1807
 ...088: f61f0000    PUT rZZ,$0
 ...08c: e3006000    SETL $0,#6000 % set address for LDOI
 ...090: e1ff00fe    SETMH $255,#00FE % rK
 ...094: f9000001    RESUME 1
                   
 ...098: e3fa0001  2H SET $250,1 % for the following: store 0 for rYY (mmix-pipe and gimmix differ)
                   
 ...09c: f7140000    PUT rL,0
 ...0a0: f400xxxx    GETA $0,3F
 ...0a4: f61c0000    PUT rWW,$0
 ...0a8: e0000200    SETH $0,#0200 % resume set
 ...0ac: ea000004    ORML $0,#0004 % SET $4,#12345678 (increases rL)
 ...0b0: f61d0000    PUT rXX,$0
 ...0b4: e2001234    SETML $0,#1234
 ...0b8: eb005678    ORL $0,#5678
 ...0bc: f61f0000    PUT rZZ,$0
 ...0c0: e3006000    SETL $0,#6000 % set address for LDOI
 ...0c4: e1ff00fe    SETMH $255,#00FE % rK
 ...0c8: f9000001    RESUME 1
                   
 ...0cc: f7140000  3H PUT rL,0
 ...0d0: f400xxxx    GETA $0,4F
 ...0d4: f61c0000    PUT rWW,$0
 ...0d8: e0000100    SETH $0,#0100 % resume continue
 ...0dc: ea002104    ORML $0,#2104
 ...0e0: eb000000    ORL $0,#0000 % ADDI $4,$0,0
 ...0e4: f61d0000    PUT rXX,$0
 ...0e8: e3006000    SETL $0,#6000
 ...0ec: f61e0000    PUT rYY,$0 % set address for LDOI
 ...0f0: f71f0000    PUT rZZ,0
 ...0f4: e1ff00fe    SETMH $255,#00FE % rK
 ...0f8: f9000001    RESUME 1
                   
 ...0fc: e0fe8000  4H SETH $254,#8000
 ...100: ebfe4000    ORL $254,#4000
 ...104: b9fffe00    SYNCD #FF,$254,0
 ...108: 00000000    TRAP 0

Symbol table:
 ATRAP = #0000000000800000 (3)
 Main = #0000000000001000 (1)
 RV = #0000000000008000 (2)
