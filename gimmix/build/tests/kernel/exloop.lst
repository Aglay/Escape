                   # 1 "kernel/exloop.mms"
                   # 1 "<built-in>"
                   # 1 "<command-line>"
                   # 1 "kernel/exloop.mms"
                   %
                   % exloop.mms -- test the raise of an exception whose handler does not zero rQ
                   %
                   
                     % paging setup: 1MiB pages, 1024 pages in seg0
                     % one PTE in root-location that maps 0 to 0
                     LOC #8000
0000000000008000:  RV OCTA #1000140000090000
 ...000: 10001400
 ...004: 00090000
                     LOC #90000
0000000000090000:  PTE OCTA #0000000000000007
 ...000: 00000000
 ...004: 00000007
                   
                     % dynamic trap address
                     LOC #600000
                   
                     % don't store the location here because it differs. mmmix will execute one instruction
                     % after each RESUME, gimmix won't
0000000000600000:  ATRAP GET $253,rQ
 ...000: fefd0010
 ...004: affdfe00    STOU $253,$254,0
 ...008: fefb001d    GET $251,rXX
 ...00c: 3ffbfb20    SRU $251,$251,32
 ...010: affbfe08    STOU $251,$254,8
 ...014: 21fefe10    ADD $254,$254,16
 ...018: 25fafa01    SUB $250,$250,1
 ...01c: 48faxxxx    BNN $250,_DONE
 ...020: f7100000    PUT rQ,0
 ...024: e3ff000f  _DONE SETL $255,#000F
 ...028: e9ff00ff    ORMH $255,#00FF % set rK
 ...02c: f9000001    RESUME 1
                   
                   
                     % forced trap address
                     LOC #500000
                   
0000000000500000:  QUIT SETH $0,#8000
 ...000: e0008000
 ...004: eb004000    ORL $0,#4000
 ...008: b9ff0000    SYNCD #FF,$0,0
 ...00c: 00000000    TRAP 0
                   
                   
                     LOC #1000
                   
                     % first setup basic paging: 0 mapped to 0
0000000000001000:  Main SETL $0,RV
 ...000: e3008000
 ...004: e8008000    ORH $0,#8000
 ...008: 8f000000    LDOU $0,$0
 ...00c: f6120000    PUT rV,$0
                     % global registers are better here because of PUSH/POP
 ...010: f7130080    PUT rG,128
                     % setup rTT
 ...014: e0008000    SETH $0,#8000
 ...018: e9000000    ORMH $0,ATRAP>>32
 ...01c: ea000060    ORML $0,ATRAP>>16
******************   ORL $0,ATRAP>>0
************ warning: YZ field doesn't fit in two bytes
 ...020: eb000000
 ...024: f60e0000    PUT rTT,$0
                     % setup rT
 ...028: e0008000    SETH $0,#8000
 ...02c: e9000000    ORMH $0,QUIT>>32
 ...030: ea000050    ORML $0,QUIT>>16
******************   ORL $0,QUIT>>0
************ warning: YZ field doesn't fit in two bytes
 ...034: eb000000
 ...038: f60d0000    PUT rT,$0
                     % setup address for results
 ...03c: e0fe8000    SETH $254,#8000
 ...040: ebfe4000    ORL $254,#4000
                     % set rK
 ...044: e10000fe    SETMH $0,#00FE
 ...048: f60f0000    PUT rK,$0
                   
                     % now go to user-mode (we are at #8000000000001000 atm)
 ...04c: e300000f    SETL $0,#000F
 ...050: e90000ff    ORMH $0,#00FF % have to be set in usermode
 ...054: c1ff0000    SET $255,$0
 ...058: e3002000    SET $0,#2000
 ...05c: f61c0000    PUT rWW,$0
 ...060: e0008000    SETH $0,#8000
 ...064: f61d0000    PUT rXX,$0
 ...068: f9000001    RESUME 1
                   
                   
                     LOC #2000
                   
0000000000002000:    SET $250,3 % stop after 3 exceptions
 ...000: e3fa0003
                   
                     % use a special-register >= 32 with put
 ...004: f7210000    PUT 33,#0
                   
                     % some dummy instructions which will cause an exception because rQ & rK is still != 0
 ...008: e3000000    SET $0,0
 ...00c: e3000000    SET $0,0
 ...010: e3000000    SET $0,0
                   
                     % now quit
 ...014: 00000001    TRAP 1

Symbol table:
 ATRAP = #0000000000600000 (4)
 Main = #0000000000001000 (1)
 PTE = #0000000000090000 (3)
 QUIT = #0000000000500000 (6)
 RV = #0000000000008000 (2)
 _DONE = #0000000000600024 (5)
