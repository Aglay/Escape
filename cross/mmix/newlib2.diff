diff -rcN src/newlibdiff1org/newlib/libc/sys/escape/compat.c src/newlib/newlib/libc/sys/escape/compat.c
*** src/newlibdiff1org/newlib/libc/sys/escape/compat.c	1970-01-01 01:00:00.000000000 +0100
--- src/newlib/newlib/libc/sys/escape/compat.c	2010-07-16 19:10:38.000000000 +0200
***************
*** 0 ****
--- 1,50 ----
+ #include <sys/stat.h>
+ #include <sys/types.h>
+ #include <sys/fcntl.h>
+ #include <sys/times.h>
+ #include <sys/errno.h>
+ #include <sys/time.h>
+ #include <stdio.h>
+ 
+ #define PAGE_SIZE 4096
+ 
+ extern int exec(char *name,char **argv);
+ extern int sendSignalTo(int pid,int sig,int data);
+ extern int _changeSize(int count);
+ 
+ /* pointer to array of char * strings that define the current environment variables */
+ char **environ = {0};
+ 
+ int execve(char *name, char **argv, char **env) {
+ 	return exec(name,argv);
+ }
+ 
+ int kill(int pid, int sig) {
+ 	return sendSignalTo(pid,sig,0);
+ }
+ 
+ caddr_t sbrk(int incr) {
+ 	unsigned int addr = _changeSize((incr + PAGE_SIZE - 1) & ~(PAGE_SIZE - 1));
+ 	if((int)addr >= -200 && (int)addr < 0)
+ 		return NULL;
+ 	return (void*)addr;
+ }
+ 
+ int stat(const char *file, struct stat *st) {
+ 	st->st_mode = S_IFCHR;
+   return 0;
+ }
+ 
+ clock_t times(struct tms *buf) {
+ 	return -1;
+ }
+ 
+ int wait(int *status) {
+ 	errno=ECHILD;
+ 	return -1;
+ }
+ 
+ int gettimeofday(struct timeval *p, struct timezone *z) {
+ 	return -1;
+ }
+ 
diff -rcN src/newlibdiff1org/newlib/libc/sys/escape/configure.in src/newlib/newlib/libc/sys/escape/configure.in
*** src/newlibdiff1org/newlib/libc/sys/escape/configure.in	1970-01-01 01:00:00.000000000 +0100
--- src/newlib/newlib/libc/sys/escape/configure.in	2010-07-16 19:10:38.000000000 +0200
***************
*** 0 ****
--- 1,8 ----
+ AC_PREREQ(2.59)
+ AC_INIT([newlib], [NEWLIB_VERSION])
+ AC_CONFIG_SRCDIR([crt0.S])
+ AC_CONFIG_AUX_DIR(../../../..)
+ NEWLIB_CONFIGURE(../../..)
+ AC_CONFIG_FILES([Makefile])
+ AC_OUTPUT
+ 
diff -rcN src/newlibdiff1org/newlib/libc/sys/escape/crt0.S src/newlib/newlib/libc/sys/escape/crt0.S
*** src/newlibdiff1org/newlib/libc/sys/escape/crt0.S	1970-01-01 01:00:00.000000000 +0100
--- src/newlib/newlib/libc/sys/escape/crt0.S	2010-07-16 19:10:35.000000000 +0200
***************
*** 0 ****
--- 1,75 ----
+ #
+ # $Id: newlib2.diff 786 2010-08-25 11:19:00Z nasmussen $
+ # Copyright (C) 2008 - 2009 Nils Asmussen
+ #
+ # This program is free software; you can redistribute it and/or
+ # modify it under the terms of the GNU General Public License
+ # as published by the Free Software Foundation; either version 2
+ # of the License, or (at your option) any later version.
+ #
+ # This program is distributed in the hope that it will be useful,
+ # but WITHOUT ANY WARRANTY; without even the implied warranty of
+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ # GNU General Public License for more details.
+ #
+ # You should have received a copy of the GNU General Public License
+ # along with this program; if not, write to the Free Software
+ # Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ #
+ 
+ .global _start
+ #.global sigRetFunc
+ .extern main
+ .extern exit
+ #.extern init_tls
+ 
+ #.include "syscalls.s"
+ 
+ #  Initial stack:
+ #  +------------------+  <- top
+ #  |     arguments    |
+ #  |        ...       |
+ #  +------------------+
+ #  |       argv       |
+ #  +------------------+
+ #  |       argc       |
+ #  +------------------+
+ #  |     TLSSize      |  0 if not present
+ #  +------------------+
+ #  |     TLSStart     |  0 if not present
+ #  +------------------+
+ #  |    entryPoint    |  0 for initial thread, thread-entrypoint for others
+ #  +------------------+
+ 
+ _start:
+ 	# first call init_tls(entryPoint,TLSStart,TLSSize)
+ 	#call	init_tls
+ 	# remove args from stack
+ 	add		$12,%esp
+ 	# it returns the entrypoint; 0 if we're the initial thread
+ 	#test	%eax,%eax
+ 	#je		initialThread
+ 	# we're an additional thread, so call the desired function
+ 	#call	*%eax
+ 	#jmp		threadExit
+ 
+ 	# initial thread calls main
+ initialThread:
+ #.ifndef SHAREDLIB
+ #	.extern __libc_init
+ #	call	__libc_init
+ #.endif
+ 	call	main
+ 
+ threadExit:
+ 	push	%eax
+ 	call	exit
+ 	# just to be sure
+ 	1: jmp		1b
+ 
+ # all signal-handler return to this "function"
+ #sigRetFunc:
+ #	mov		$SYSCALL_ACKSIG,%eax
+ #	int		$SYSCALL_IRQ
+ 	# never reached
+ 
diff -rcN src/newlibdiff1org/newlib/libc/sys/escape/Makefile.am src/newlib/newlib/libc/sys/escape/Makefile.am
*** src/newlibdiff1org/newlib/libc/sys/escape/Makefile.am	1970-01-01 01:00:00.000000000 +0100
--- src/newlib/newlib/libc/sys/escape/Makefile.am	2010-07-16 19:10:39.000000000 +0200
***************
*** 0 ****
--- 1,26 ----
+ AUTOMAKE_OPTIONS = cygnus
+ INCLUDES = $(NEWLIB_CFLAGS) $(CROSS_CFLAGS) $(TARGET_CFLAGS)
+ AM_CCASFLAGS = $(INCLUDES)
+ 
+ noinst_LIBRARIES = lib.a
+ 
+ if MAY_SUPPLY_SYSCALLS
+ extra_objs = $(lpfx)syscalls.o $(lpfx)compat.o
+ else
+ extra_objs =
+ endif
+ 
+ lib_a_SOURCES =
+ lib_a_LIBADD = $(extra_objs)
+ EXTRA_lib_a_SOURCES = syscalls.S compat.c crt0.S
+ lib_a_DEPENDENCIES = $(extra_objs)
+ lib_a_CCASFLAGS = $(AM_CCASFLAGS)
+ lib_a_CFLAGS = $(AM_CFLAGS)
+ 
+ if MAY_SUPPLY_SYSCALLS
+ all: crt0.o
+ endif
+ 
+ ACLOCAL_AMFLAGS = -I ../../..
+ CONFIG_STATUS_DEPENDENCIES = $(newlib_basedir)/configure.host
+ 
